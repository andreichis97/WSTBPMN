PROCEDURE global GET_MODEL_NAMESPACES modelId: integer result: reference
{
    SETL prefixesValues:("")
    CC "Core" GET_CLASS_ID objid:(modelId)
    CC "Core" GET_CLASS_NAME classid:(classid)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"WST Model Namespaces"
    SETL modelNamespacesId:(attrid)
    #attrid
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(modelId) attrid:(modelNamespacesId)
	FOR i in:(rowids)
	{
		CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
		SETL prefixValue:(val)
		CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Dictionary"
		SETL dictionaryValue:(val)
        SETL prefixesValues:(prefixesValues + "@prefix " + prefixValue + " " + dictionaryValue + ".\n")
	}
    SETL prefixesValues:(prefixesValues + "\n")
    SETL result:(prefixesValues)
}

PROCEDURE global GET_SIMPLEWSTELEMENTS_ATTRIBUTES objId: integer result: reference
{
    SETL simpleWSTElemAttrs:("")
    CC "Core" GET_CLASS_ID objid:(objId)
    #CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Prefix"
    #SETL simpleWSTElemPrefix:(val)
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"URI"
    SETL simpleWSTElemUri:(val)
    SETL simpleWSTElemPrefixUri:(simpleWSTElemUri)
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Name"
    SETL simpleWSTElemName:(val)
     CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL simpleWSTElemDescription:(val)
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Type"
    SETL simpleWSTElemType:(val)
    SETL simpleWSTElemAttrs:(simpleWSTElemAttrs + simpleWSTElemPrefixUri + " a " + ":SimpleWSTElement" + ".\n")
    SETL simpleWSTElemAttrs:(simpleWSTElemAttrs + simpleWSTElemPrefixUri + " rdfs:label " + "\"" + simpleWSTElemName + "\"" + ".\n")
    SETL simpleWSTElemAttrs:(simpleWSTElemAttrs + simpleWSTElemPrefixUri + " :description " + "\"" + simpleWSTElemDescription + "\"" + "^^" + "xsd:string" + ".\n")
    SETL simpleWSTElemAttrs:(simpleWSTElemAttrs + simpleWSTElemPrefixUri + " :isOfType " + "\"" + simpleWSTElemType + "\"" + ".\n")
    #Start Customer Instance #poate de pus catre performer interref
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Customer Instance"
    SETL customerInstanceAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(customerInstanceAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(customerInstanceAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL roleObjName:(tobjname)
        SETL roleObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(roleObjClassId) objname:(roleObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL rolePrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL roleUriValue:(val)
        SETL rolePrefixUri:(roleUriValue)
        SETL simpleWSTElemAttrs:(simpleWSTElemAttrs + simpleWSTElemPrefixUri + " :servesCustomer " + rolePrefixUri + ".\n")
    }
    #End Customer Instance
    #Start Participant Instance #poate de pus catre performer interref
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Participant Instance"
    SETL participantInstanceAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(participantInstanceAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(participantInstanceAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL roleObjName:(tobjname)
        SETL roleObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(roleObjClassId) objname:(roleObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL rolePrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL roleUriValue:(val)
        SETL rolePrefixUri:(roleUriValue)
        SETL simpleWSTElemAttrs:(simpleWSTElemAttrs + simpleWSTElemPrefixUri + " :involvesParticipant " + rolePrefixUri + ".\n")
    }
    #End Participant Instance
    #Start Information Instance
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Information Instance"
    SETL informationInstanceAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(informationInstanceAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(informationInstanceAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL roleObjName:(tobjname)
        SETL roleObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(roleObjClassId) objname:(roleObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL rolePrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL roleUriValue:(val)
        SETL rolePrefixUri:(roleUriValue)
        SETL simpleWSTElemAttrs:(simpleWSTElemAttrs + simpleWSTElemPrefixUri + " :involvesInformation " + rolePrefixUri + ".\n")
    }
    #End Information Instance
    #Start Product/Service Instance
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Product/Service Instance"
    SETL productServiceInstanceAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(productServiceInstanceAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(productServiceInstanceAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL roleObjName:(tobjname)
        SETL roleObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(roleObjClassId) objname:(roleObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL rolePrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL roleUriValue:(val)
        SETL rolePrefixUri:(roleUriValue)
        SETL simpleWSTElemAttrs:(simpleWSTElemAttrs + simpleWSTElemUri + " :withValue " + rolePrefixUri + ".\n")
    }
    #End Product/Service Instance
    #Start Infrastructure
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Infrastructure Element Instance"
    SETL infrastructureElementInstanceAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(infrastructureElementInstanceAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(infrastructureElementInstanceAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL infrObjName:(tobjname)
        SETL infrObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(infrObjClassId) objname:(infrObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL infrPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL infrUriValue:(val)
        SETL infrPrefixUri:(infrUriValue)
        SETL simpleWSTElemAttrs:(simpleWSTElemAttrs + simpleWSTElemUri + " :involvesInfrastructure " + infrPrefixUri + ".\n")
    }
    #End Infrastructure
    #Start Environment
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Environment Element Instance"
    SETL environmentElementInstanceAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(environmentElementInstanceAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(environmentElementInstanceAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL envObjName:(tobjname)
        SETL envObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(envObjClassId) objname:(envObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL envPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL envUriValue:(val)
        SETL envPrefixUri:(envUriValue)
        SETL simpleWSTElemAttrs:(simpleWSTElemAttrs + simpleWSTElemUri + " :involvesEnvironment " + envPrefixUri + ".\n")
    }
    #End Environment
    #Start Strategy
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Strategy Element Instance"
    SETL strategyElementInstanceAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(strategyElementInstanceAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(strategyElementInstanceAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL stratObjName:(tobjname)
        SETL stratObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(stratObjClassId) objname:(stratObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL stratPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL stratUriValue:(val)
        SETL stratPrefixUri:(stratUriValue)
        SETL simpleWSTElemAttrs:(simpleWSTElemAttrs + simpleWSTElemUri + " :involvesStrategy " + stratPrefixUri + ".\n")
    }
    #End Strategy

    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL simpleWSTElemAttrs:(simpleWSTElemAttrs + simpleWSTElemPrefixUri + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL simpleWSTElemAttrs:(simpleWSTElemAttrs + subject + " " + predicate + " " + simpleWSTElemPrefixUri + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL simpleWSTElemAttrs:(simpleWSTElemAttrs + subject + " " + predicate + " " + object + ".\n")
        }
    }
    SETL result:(simpleWSTElemAttrs)
    #to parse instances and equivalences as well for participant - customer
}

PROCEDURE global GET_COMPLEXWSTELEMENTS_ATTRIBUTES objId: integer result: reference
{
    SETL complexWSTElemAttrs:("")
    CC "Core" GET_CLASS_ID objid:(objId)
    #CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Prefix"
    #SETL complexWSTElemPrefix:(val)
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"URI"
    SETL complexWSTElemUri:(val)
    SETL complexWSTElemPrefixUri:(complexWSTElemUri)
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Name"
    SETL complexWSTElemName:(val)
     CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL complexWSTElemDescription:(val)
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Type"
    SETL complexWSTElemType:(val)
    SETL complexWSTElemAttrs:(complexWSTElemAttrs + complexWSTElemPrefixUri + " a " + ":ComplexWSTElement" + ".\n")
    SETL complexWSTElemAttrs:(complexWSTElemAttrs + complexWSTElemPrefixUri + " rdfs:label " + "\"" + complexWSTElemName + "\"" + ".\n")
    SETL complexWSTElemAttrs:(complexWSTElemAttrs + complexWSTElemPrefixUri + " :description " + "\"" + complexWSTElemDescription + "\"" + "^^" + "xsd:string" + ".\n")
    SETL complexWSTElemAttrs:(complexWSTElemAttrs + complexWSTElemPrefixUri + " :isOfType " + "\"" + complexWSTElemType + "\"" + ".\n")
    #Start Process Instance
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Process Instance"
    SETL processInstanceAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(processInstanceAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(processInstanceAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        #CC "Core" GET_ATTR_VAL objid:(modelIdToEnter) attrname:"Prefix"
        #SETL rolePrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(modelIdToEnter) attrname:"URI"
        SETL roleUriValue:(val)
        SETL rolePrefixUri:(roleUriValue)
        SETL complexWSTElemAttrs:(complexWSTElemAttrs + complexWSTElemPrefixUri + " :hasProcessActivity " + rolePrefixUri + ".\n") #other pred needed
    }
    #End Process Instance
    #Start Technology Instance
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Technology Instance"
    SETL technologyInstanceAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(technologyInstanceAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(technologyInstanceAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        #CC "Core" GET_ATTR_VAL objid:(modelIdToEnter) attrname:"Prefix"
        #SETL rolePrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(modelIdToEnter) attrname:"URI"
        SETL roleUriValue:(val)
        SETL rolePrefixUri:(roleUriValue)
        SETL complexWSTElemAttrs:(complexWSTElemAttrs + complexWSTElemPrefixUri + " :involvesTechnology " + rolePrefixUri + ".\n")
    }
    #End Technology Instance

    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL complexWSTElemAttrs:(complexWSTElemAttrs + complexWSTElemPrefixUri + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL complexWSTElemAttrs:(complexWSTElemAttrs + subject + " " + predicate + " " + complexWSTElemPrefixUri + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL complexWSTElemAttrs:(complexWSTElemAttrs + subject + " " + predicate + " " + object + ".\n")
        }
    }

    SETL result:(complexWSTElemAttrs)
}

#---------------------------------------
CC "Modeling" GET_ACT_MODEL
SETL actModelId: (modelid)

#CC "Core" GET_ATTR_VAL objid:(actModelId) attrname:"Prefix"
#SETL modelPrefix:(val)

CC "Core" GET_ATTR_VAL objid:(actModelId) attrname:"URI"
SETL modelUri:(val)

SETL namespaces:("")
SETL endMessage:("")
GET_MODEL_NAMESPACES modelId:(actModelId) result:namespaces

IF(modelUri != "")
{
    SETL message:(modelUri + "\n" + "{" + "\n")
    SETL message:(namespaces + message)
    SETL endMessage:("}")
    #CC "AdoScript" VIEWBOX text:("Bobr Kurwa")

}
ELSE
{
    SETL message:("")
    SETL message:(message + namespaces)
}

#SETL message:("")

#Simple WST Elements
CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"SimpleWSTElement"
SETL simpleWSTElementsObjids:(objids)
FOR i in:(simpleWSTElementsObjids)
{
    GET_SIMPLEWSTELEMENTS_ATTRIBUTES objId:(VAL i) result:simpleWSTElemAttrs
    SETL message:(message + simpleWSTElemAttrs)
    SETL simpleWSTElemAttrs:("")
}
#CC "AdoScript" VIEWBOX text:(message)

#Complex WST Elements
CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"ComplexWSTElement"
SETL complexWSTElementsObjids:(objids)
FOR i in:(complexWSTElementsObjids)
{
    GET_COMPLEXWSTELEMENTS_ATTRIBUTES objId:(VAL i) result:complexWSTElemAttrs
    SETL message:(message + complexWSTElemAttrs)
    SETL complexWSTElemAttrs:("")
}
#CC "AdoScript" VIEWBOX text:(message)

#Participant Customer Equivalence
CC "Core" GET_ALL_CONNECTORS modelid:(actModelId)
SETL connectors:(objids)
FOR i in:(connectors)
{
    CC "Core" GET_CLASS_ID objid:(VAL i)
    CC "Core" GET_CLASS_NAME classid:(classid)
    IF(classname = "participantCustomerEquivalence")
    {
        CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL i)
        #CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:"Prefix"
        #SETL toObjPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:"URI"
        SETL toObjUri:(val)
        SETL toObjPrefixUri:(toObjUri)
        #CC "Core" GET_ATTR_VAL objid:(fromobjid) attrname:"Prefix"
        #SETL fromObjPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(fromobjid) attrname:"URI"
        SETL fromObjUri:(val)
        SETL fromObjPrefixUri:(fromObjUri)
        SETL message:(message + fromObjPrefixUri + " owl:sameAs " + toObjPrefixUri + ".\n")
    }
}
IF (endMessage != "")
{
    SETL message:(message + endMessage)
    CC "AdoScript" VIEWBOX text:(message)
    SETL trigFilePath:("D:\\Andrei\\ModellingTools\\WST_BPMN_Modeling_Tool\\Results\\wsf_trig.trig")
    SETL turtleFilePath:("D:\\Andrei\\ModellingTools\\WST_BPMN_Modeling_Tool\\Results\\wsf_turtle.ttl")
    CC "AdoScript" FWRITE file:(trigFilePath) text:(message) binary:0
    CC "AdoScript" FWRITE file:(turtleFilePath) text:("") binary:0
    #SETL filePath:("D:\\Andrei\\ModellingTools\\Threat_Modeling_Tool\\Scripts\\Results\\dfd_serialization_type.txt")
    #CC "AdoScript" FWRITE file:(filePath) text:("trig") binary:0
}
ELSE
{
    CC "AdoScript" VIEWBOX text:(message)
    SETL trigFilePath:("D:\\Andrei\\ModellingTools\\WST_BPMN_Modeling_Tool\\Results\\wsf_trig.trig")
    SETL turtleFilePath:("D:\\Andrei\\ModellingTools\\WST_BPMN_Modeling_Tool\\Results\\wsf_turtle.ttl")
    CC "AdoScript" FWRITE file:(trigFilePath) text:("") binary:0
    CC "AdoScript" FWRITE file:(turtleFilePath) text:(message) binary:0
    #SETL filePath:("D:\\Andrei\\ModellingTools\\Threat_Modeling_Tool\\Scripts\\Results\\dfd_serialization_type.txt")
    #CC "AdoScript" FWRITE file:(filePath) text:("turtle") binary:0
}