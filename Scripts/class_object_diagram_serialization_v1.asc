PROCEDURE global GET_MODEL_NAMESPACES modelId: integer result: reference
{
    SETL prefixesValues:("")
    CC "Core" GET_CLASS_ID objid:(modelId)
    CC "Core" GET_CLASS_NAME classid:(classid)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"WST Model Namespaces"
    SETL modelNamespacesId:(attrid)
    #attrid
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(modelId) attrid:(modelNamespacesId)
	FOR i in:(rowids)
	{
		CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
		SETL prefixValue:(val)
		CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Dictionary"
		SETL dictionaryValue:(val)
        SETL prefixesValues:(prefixesValues + "@prefix " + prefixValue + " " + dictionaryValue + ".\n")
	}
    SETL prefixesValues:(prefixesValues + "\n")
    SETL result:(prefixesValues)
}

PROCEDURE global GET_PACKAGE_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":Package" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL packageDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " :description " + "\"" + packageDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL packageComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasComment " + "\"" + packageComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL packageOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasOpenQuestions " + "\"" + packageOpenQuestions + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Visibility"
    SETL packageVisibility:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasVisibility " + "\"" + packageVisibility + "\"" + ".\n")

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Sub packages"
    SETL subPackagesAttributeId:(attrid)
    CC "Core" GET_ALL_INTERREFS_OF_ATTR objid:(objId) attrid:(subPackagesAttributeId)
    #CC "AdoScript" VIEWBOX text:(reftext)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(subPackagesAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        FOR i from:(1) to:(intrfCount)
        {
            #users should never use : in names
            SETL textEx:(token(reftext, i, "REF "))
            SETL md:(token(textEx, 7, ":"))
            SETL modelIdToEnter:(token(md, 0, " "))
            SETL tobj:(token(textEx, 9, ":"))
            SETL searchedObjId:(token(tobj, 0, " "))
            CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
            IF (NOT(isopened))
            {
                CC "Modeling" OPEN modelids:(modelIdToEnter)
            }
            CC "Core" GET_ATTR_VAL objid:(VAL searchedObjId) attrname:"Prefix"
            SETL objPrefix:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL searchedObjId) attrname:"URI"
            SETL objUri:(val)
            SETL objPrefixUri:(objPrefix + objUri)
            SETL attributesValues:(attributesValues + uriVal + " :hasSubPackage " + objPrefixUri + ".\n")
        }
    }

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Sub models"
    SETL subModelsAttributeId:(attrid)
    CC "Core" GET_ALL_INTERREFS_OF_ATTR objid:(objId) attrid:(subModelsAttributeId)
    #CC "AdoScript" VIEWBOX text:(reftext)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(subModelsAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        FOR i from:(1) to:(intrfCount)
        {
            #users should never use : in names
            SETL textEx:(token(reftext, i, "REF "))
            #CC "AdoScript" VIEWBOX text:(textEx)
            SETL md:(token(textEx, 5, ":"))
            SETL modelIdToEnter:(token(md, 0, " "))
            #CC "AdoScript" VIEWBOX text:(modelIdToEnter)
            CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
            IF (NOT(isopened))
            {
                CC "Modeling" OPEN modelids:(modelIdToEnter)
            }
            CC "Core" GET_ATTR_VAL objid:(VAL modelIdToEnter) attrname:"Prefix"
            SETL objPrefix:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL modelIdToEnter) attrname:"URI"
            SETL objUri:(val)
            SETL objPrefixUri:(objPrefix + objUri)
            SETL attributesValues:(attributesValues + uriVal + " :hasSubModel " + objPrefixUri + ".\n")
        }
    }

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Packaged elements"
    SETL packagedElementsAttributeId:(attrid)
    CC "Core" GET_ALL_INTERREFS_OF_ATTR objid:(objId) attrid:(packagedElementsAttributeId)
    #CC "AdoScript" VIEWBOX text:(reftext)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(packagedElementsAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        FOR i from:(1) to:(intrfCount)
        {
            #users should never use : in names
            SETL textEx:(token(reftext, i, "REF "))
            SETL md:(token(textEx, 7, ":"))
            SETL modelIdToEnter:(token(md, 0, " "))
            SETL tobj:(token(textEx, 9, ":"))
            SETL searchedObjId:(token(tobj, 0, " "))
            CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
            IF (NOT(isopened))
            {
                CC "Modeling" OPEN modelids:(modelIdToEnter)
            }
            CC "Core" GET_ATTR_VAL objid:(VAL searchedObjId) attrname:"Prefix"
            SETL objPrefix:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL searchedObjId) attrname:"URI"
            SETL objUri:(val)
            SETL objPrefixUri:(objPrefix + objUri)
            SETL attributesValues:(attributesValues + uriVal + " :hasPackagedElement " + objPrefixUri + ".\n")
        }
    }

    #includes placed above sub artifacts (inside)
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Name"
    SETL objName:(val)
    SETL aqlExpr:("{" + "\"" + objName + "\"" + ":\"Package (UML)" + "\"" + "}<-" + "\"" + "Is inside" + "\"")
    CC "AQL" EVAL_AQL_EXPRESSION expr:(aqlExpr) modelid:(actModelId)
    SETL insideObjids:(objids)
    FOR i in:(insideObjids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
        SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objPrefix + objUri)
        SETL attributesValues:(attributesValues + uriVal + " :hasPackagedElement " + objPrefixUri + ".\n")
    }
    #--- 

    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL packageGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " :generalPurpose " + "\"" + packageGeneralPurpose + "\"" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }
    
    SETL result:(attributesValues)
}

PROCEDURE global GET_CLASS_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":Class" + ".\n")
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Referenced class"
    SETL referencedClassAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(referencedClassAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(referencedClassAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objPrefix + objUri)
        SETL attributesValues:(attributesValues + uriVal + " :referencedClass " + objPrefixUri + ".\n")
    }
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL classDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " :description " + "\"" + classDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL classComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasComment " + "\"" + classComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL classOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasOpenQuestions " + "\"" + classOpenQuestions + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Visibility"
    SETL classVisibility:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasVisibility " + "\"" + classVisibility + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Extended properties"
    SETL classExtendedProperties:(val)
    SETL attributesValues:(attributesValues + uriVal + " :extendedProperties " + "\"" + classExtendedProperties + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"User defined properties"
    SETL classUserDefinedProperties:(val)
    SETL attributesValues:(attributesValues + uriVal + " :userDefinedProperties " + "\"" + classUserDefinedProperties + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsAbstract"
    SETL classIsAbstract:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isAbstract " + "\"" + classIsAbstract + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsActive"
    SETL classIsActive:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isActive " + "\"" + classIsActive + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsLeaf"
    SETL classIsLeaf:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isLeaf " + "\"" + classIsLeaf + "\"" + ".\n")

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Details"
    SETL detailsAttributeId:(attrid)
    CC "Core" GET_ALL_INTERREFS_OF_ATTR objid:(objId) attrid:(detailsAttributeId)
    #CC "AdoScript" VIEWBOX text:(reftext)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(detailsAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        #CC "AdoScript" VIEWBOX text:(tobjname)
        FOR i from:(1) to:(intrfCount)
        {
            #users should never use : in names
            SETL textEx:(token(reftext, i, "REF "))
            SETL md:(token(textEx, 5, ":"))
            SETL modelIdToEnter:(token(md, 0, " "))
            CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
            IF (NOT(isopened))
            {
                CC "Modeling" OPEN modelids:(modelIdToEnter)
            }
            CC "Core" GET_ATTR_VAL objid:(VAL modelIdToEnter) attrname:"Prefix"
            SETL objPrefix:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL modelIdToEnter) attrname:"URI"
            SETL objUri:(val)
            SETL objPrefixUri:(objPrefix + objUri)
            SETL attributesValues:(attributesValues + uriVal + " :detailedIn " + objPrefixUri + ".\n")
        }
    }

    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Template parameter"
    SETL classTemplateParameter:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasTemplateParameter " + "\"" + classTemplateParameter + "\"" + ".\n")

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Properties"
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Visibility"
		SETL visibility:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Derived"
		SETL derived:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Naming"
		SETL naming:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Type"
		SETL type:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Multiplicity"
		SETL multiplicity:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Default value"
		SETL defaultValue:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Property modifiers"
		SETL propertyModifiers:(val)
		SET attributesValues:(attributesValues + uriVal + " :hasProperties " + "[" + " :visibility " + "\"" + visibility + "\"" + "; " + ":derived " + "\"" + derived + "\"" + "; "  + ":naming " + "\"" + naming + "\"" + "; " + ":type " + "\"" + type + "\"" + "; " + ":multiplicity " + "\"" + multiplicity + "\"" + "; " + ":defaultValue " + "\"" + defaultValue + "\"" + "; " + ":propertyModifiers " + "\"" + propertyModifiers + "\"" + "; " + "a" + " :ClassProperty " + "].\n")
    }

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Operations"
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Visibility"
		SETL visibility:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Naming"
		SETL naming:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Parameter list"
		SETL parameterList:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Return type"
		SETL returnType:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Operation properties"
		SETL operationProperties:(val)
		SET attributesValues:(attributesValues + uriVal + " :hasOperations " + "[" + " :visibility " + visibility + "; " + ":naming " + naming + "; " + ":parameterList " + parameterList + "; " + ":returnType " + returnType + "; " + ":operationProperties " + operationProperties + "; " + "a" + " :ClassOperation " + "].\n")
    }

    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL classGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " :generalPurpose " + "\"" + classGeneralPurpose + "\"" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }

    SETL result:(attributesValues)
}

PROCEDURE global GET_INSTANCE_SPECIFICATION_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":InstanceSpecification" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Anonymous"
    SETL instanceSpecificationAnonymous:(val)
    SETL attributesValues:(attributesValues + uriVal + " :anonymous " + "\"" + instanceSpecificationAnonymous + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL instanceSpecificationDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " :description " + "\"" + instanceSpecificationDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL instanceSpecificationComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasComment " + "\"" + instanceSpecificationComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL instanceSpecificationOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasOpenQuestions " + "\"" + instanceSpecificationOpenQuestions + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Visibility"
    SETL instanceSpecificationVisibility:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasVisibility " + "\"" + instanceSpecificationVisibility + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Extended property"
    SETL instanceSpecificationExtendedProperty:(val)
    SETL attributesValues:(attributesValues + uriVal + " :extendedProperty " + "\"" + instanceSpecificationExtendedProperty + "\"" + ".\n")
    
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Classifier"
    SETL classifierAttributeId:(attrid)
    CC "Core" GET_ALL_INTERREFS_OF_ATTR objid:(objId) attrid:(classifierAttributeId)
    #CC "AdoScript" VIEWBOX text:(reftext)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(classifierAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        FOR i from:(1) to:(intrfCount)
        {
            #users should never use : in names
            SETL textEx:(token(reftext, i, "REF "))
            SETL md:(token(textEx, 7, ":"))
            SETL modelIdToEnter:(token(md, 0, " "))
            SETL tobj:(token(textEx, 9, ":"))
            SETL searchedObjId:(token(tobj, 0, " "))
            CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
            IF (NOT(isopened))
            {
                CC "Modeling" OPEN modelids:(modelIdToEnter)
            }
            CC "Core" GET_ATTR_VAL objid:(VAL searchedObjId) attrname:"Prefix"
            SETL objPrefix:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL searchedObjId) attrname:"URI"
            SETL objUri:(val)
            SETL objPrefixUri:(objPrefix + objUri)
            SETL attributesValues:(attributesValues + uriVal + " :hasClassifier " + objPrefixUri + ".\n")
        }
    }

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Slots"
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Defining feature"
		SETL definingFeature:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Feature type"
		SETL featureType:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Value"
		SETL value:(val)
		SET attributesValues:(attributesValues + uriVal + " :hasSlots " + "[" + " :definingFeature " + definingFeature + "; " + ":featureType " + featureType + "; " + ":value " + value + "; " + "a" + " :InstanceSpecificationSlot " + "].\n")
    }

    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Specification"
    SETL instanceSpecificationSpec:(val)
    SETL attributesValues:(attributesValues + uriVal + " :specification " + "\"" + instanceSpecificationSpec + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL instanceSpecificationGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " :generalPurpose " + "\"" + instanceSpecificationGeneralPurpose + "\"" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }
    
    SETL result:(attributesValues)
}

PROCEDURE global GET_INTERFACE_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":Interface" + ".\n")
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Referenced interface"
    SETL referencedInterfaceAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(referencedInterfaceAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(referencedInterfaceAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objPrefix + objUri)
        SETL attributesValues:(attributesValues + uriVal + " :referencedInterface " + objPrefixUri + ".\n")
    }
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL interfaceDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " :description " + "\"" + interfaceDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL interfaceComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasComment " + "\"" + interfaceComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL interfaceOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasOpenQuestions " + "\"" + interfaceOpenQuestions + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Visibility"
    SETL interfaceVisibility:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasVisibility " + "\"" + interfaceVisibility + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Type"
    SETL interfaceType:(val)
    SETL attributesValues:(attributesValues + uriVal + " :type " + "\"" + interfaceType + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsAbstract"
    SETL interfaceIsAbstract:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isAbstract " + "\"" + interfaceIsAbstract + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsLeaf"
    SETL interfaceIsLeaf:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isLeaf " + "\"" + interfaceIsLeaf + "\"" + ".\n")
    
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Details"
    SETL detailsAttributeId:(attrid)
    CC "Core" GET_ALL_INTERREFS_OF_ATTR objid:(objId) attrid:(detailsAttributeId)
    #CC "AdoScript" VIEWBOX text:(reftext)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(detailsAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        FOR i from:(1) to:(intrfCount)
        {
            #users should never use : in names
            SETL textEx:(token(reftext, i, "REF "))
            SETL md:(token(textEx, 7, ":"))
            SETL modelIdToEnter:(token(md, 0, " "))
            SETL tobj:(token(textEx, 9, ":"))
            SETL searchedObjId:(token(tobj, 0, " "))
            CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
            IF (NOT(isopened))
            {
                CC "Modeling" OPEN modelids:(modelIdToEnter)
            }
            CC "Core" GET_ATTR_VAL objid:(VAL searchedObjId) attrname:"Prefix"
            SETL objPrefix:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL searchedObjId) attrname:"URI"
            SETL objUri:(val)
            SETL objPrefixUri:(objPrefix + objUri)
            SETL attributesValues:(attributesValues + uriVal + " :hasDetails " + objPrefixUri + ".\n")
        }
    }

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Properties"
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Visibility"
		SETL visibility:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Derived"
		SETL derived:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Naming"
		SETL naming:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Type"
		SETL type:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Multiplicity"
		SETL multiplicity:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Default value"
		SETL defaultValue:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Property modifiers"
		SETL propertyModifiers:(val)
		SET attributesValues:(attributesValues + uriVal + " :hasProperties " + "[" + " :visibility " + visibility + "; " + ":derived " + derived + "; "  + ":naming " + naming + "; " + ":type " + type + "; " + ":multiplicity " + multiplicity + "; " + ":defaultValue " + defaultValue + "; " + ":propertyModifiers " + propertyModifiers + "; " + "a" + " :InterfaceProperty " + "].\n")
    }

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Operations"
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Visibility"
		SETL visibility:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Naming"
		SETL naming:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Parameter list"
		SETL parameterList:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Return type"
		SETL returnType:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Operation properties"
		SETL operationProperties:(val)
		SET attributesValues:(attributesValues + uriVal + " :hasOperations " + "[" + " :visibility " + visibility + "; " + ":naming " + naming + "; " + ":parameterList " + parameterList + "; " + ":returnType " + returnType + "; " + ":operationProperties " + operationProperties + "; " + "a" + " :InterfaceOperation " + "].\n")
    }

    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL interfaceGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " :generalPurpose " + "\"" + interfaceGeneralPurpose + "\"" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }
    
    SETL result:(attributesValues)
}

PROCEDURE global GET_DATA_TYPE_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":DataType" + ".\n")
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Referenced dataType"
    SETL referencedDataTypeAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(referencedDataTypeAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(referencedDataTypeAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objPrefix + objUri)
        SETL attributesValues:(attributesValues + uriVal + " :referencedDataType " + objPrefixUri + ".\n")
    }
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL dataTypeDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " :description " + "\"" + dataTypeDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL dataTypeComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasComment " + "\"" + dataTypeComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL dataTypeOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasOpenQuestions " + "\"" + dataTypeOpenQuestions + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Visibility"
    SETL dataTypeVisibility:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasVisibility " + "\"" + dataTypeVisibility + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Primitive type"
    SETL dataTypePrimitiveType:(val)
    SETL attributesValues:(attributesValues + uriVal + " :primitiveType " + "\"" + dataTypePrimitiveType + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsAbstract"
    SETL dataTypeIsAbstract:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isAbstract " + "\"" + dataTypeIsAbstract + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsLeaf"
    SETL dataTypeIsLeaf:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isLeaf " + "\"" + dataTypeIsLeaf + "\"" + ".\n")
    
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Properties"
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Visibility"
		SETL visibility:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Derived"
		SETL derived:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Naming"
		SETL naming:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Type"
		SETL type:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Multiplicity"
		SETL multiplicity:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Default value"
		SETL defaultValue:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Property modifiers"
		SETL propertyModifiers:(val)
		SET attributesValues:(attributesValues + uriVal + " :hasProperties " + "[" + " :visibility " + visibility + "; " + ":derived " + derived + "; "  + ":naming " + naming + "; " + ":type " + type + "; " + ":multiplicity " + multiplicity + "; " + ":defaultValue " + defaultValue + "; " + ":propertyModifiers " + propertyModifiers + "; " + "a" + " :DataTypeProperty " + "].\n")
    }

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Operations"
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Visibility"
		SETL visibility:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Naming"
		SETL naming:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Parameter list"
		SETL parameterList:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Return type"
		SETL returnType:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Operation properties"
		SETL operationProperties:(val)
		SET attributesValues:(attributesValues + uriVal + " :hasOperations " + "[" + " :visibility " + visibility + "; " + ":naming " + naming + "; " + ":parameterList " + parameterList + "; " + ":returnType " + returnType + "; " + ":operationProperties " + operationProperties + "; " + "a" + " :DataTypeOperation " + "].\n")
    }

    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL dataTypeGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " :generalPurpose " + "\"" + dataTypeGeneralPurpose + "\"" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }
    
    SETL result:(attributesValues)
}

PROCEDURE global GET_ENUMERATION_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":Enumeration" + ".\n")
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Referenced enumeration"
    SETL referencedEnumerationAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(referencedEnumerationAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(referencedEnumerationAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objPrefix + objUri)
        SETL attributesValues:(attributesValues + uriVal + " :referencedEnumeration " + objPrefixUri + ".\n")
    }
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL enumerationDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " :description " + "\"" + enumerationDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL enumerationComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasComment " + "\"" + enumerationComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL enumerationOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasOpenQuestions " + "\"" + enumerationOpenQuestions + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Visibility"
    SETL enumerationVisibility:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasVisibility " + "\"" + enumerationVisibility + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsAbstract"
    SETL enumerationIsAbstract:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isAbstract " + "\"" + enumerationIsAbstract + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsLeaf"
    SETL enumerationIsLeaf:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isLeaf " + "\"" + enumerationIsLeaf + "\"" + ".\n")

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Enumeration Literals"
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Visibility"
		SETL visibility:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Literal"
		SETL literal:(val)
		SET attributesValues:(attributesValues + uriVal + " :hasEnumerationLiterals " + "[" + " :visibility " + visibility + "; " + ":literal " + literal + "; " + "a" + " :EnumerationLiteral " + "].\n")
    }
    
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Properties"
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Visibility"
		SETL visibility:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Derived"
		SETL derived:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Naming"
		SETL naming:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Type"
		SETL type:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Multiplicity"
		SETL multiplicity:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Default value"
		SETL defaultValue:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Property modifiers"
		SETL propertyModifiers:(val)
		SET attributesValues:(attributesValues + uriVal + " :hasProperties " + "[" + " :visibility " + visibility + "; " + ":derived " + derived + "; "  + ":naming " + naming + "; " + ":type " + type + "; " + ":multiplicity " + multiplicity + "; " + ":defaultValue " + defaultValue + "; " + ":propertyModifiers " + propertyModifiers + "; " + "a" + " :EnumerationProperty " + "].\n")
    }

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Operations"
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Visibility"
		SETL visibility:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Naming"
		SETL naming:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Parameter list"
		SETL parameterList:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Return type"
		SETL returnType:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Operation properties"
		SETL operationProperties:(val)
		SET attributesValues:(attributesValues + uriVal + " :hasOperations " + "[" + " :visibility " + visibility + "; " + ":naming " + naming + "; " + ":parameterList " + parameterList + "; " + ":returnType " + returnType + "; " + ":operationProperties " + operationProperties + "; " + "a" + " :EnumerationOperation " + "].\n")
    }

    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL enumerationGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " :generalPurpose " + "\"" + enumerationGeneralPurpose + "\"" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }

    SETL result:(attributesValues)
}

PROCEDURE global GET_CONSTRAINT_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":Constraint" + ".\n")
    
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL constraintDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " :description " + "\"" + constraintDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL constraintComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasComment " + "\"" + constraintComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL constraintOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasOpenQuestions " + "\"" + constraintOpenQuestions + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Specification"
    SETL constraintSpecification:(val)
    SETL attributesValues:(attributesValues + uriVal + " :specification " + "\"" + constraintSpecification + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL constraintGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " :generalPurpose " + "\"" + constraintGeneralPurpose + "\"" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }
    
    SETL result:(attributesValues)
}

#--------------
CC "Modeling" GET_ACT_MODEL
SETL actModelId: (modelid)

CC "Core" GET_ATTR_VAL objid:(actModelId) attrname:"Prefix"
SETL modelPrefix:(val)

CC "Core" GET_ATTR_VAL objid:(actModelId) attrname:"URI"
SETL modelUri:(val)

SETL namespaces:("")
SETL endMessage:("")
GET_MODEL_NAMESPACES modelId:(actModelId) result:namespaces

IF(modelPrefix != "" AND modelUri != "")
{
    SETL message:(modelPrefix + modelUri + "\n" + "{" + "\n")
    SETL message:(namespaces + message)
    SETL endMessage:("}")
    #CC "AdoScript" VIEWBOX text:("Bobr Kurwa")

}
ELSE
{
    SETL message:("")
    SETL message:(message + namespaces)
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Package (UML)"
SETL packageObjids:(objids)
FOR i in:(packageObjids)
{
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(prefixVal + uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_PACKAGE_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:packageAttrs 
    SETL message:(message + packageAttrs)
    SETL packageAttrs:("")
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Class (UML)"
SETL classObjids:(objids)
FOR i in:(classObjids)
{
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(prefixVal + uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_CLASS_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:classAttrs 
    SETL message:(message + classAttrs)
    SETL classAttrs:("")
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Instance Specification (UML)"
SETL instanceSpecObjids:(objids)
FOR i in:(instanceSpecObjids)
{
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(prefixVal + uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_INSTANCE_SPECIFICATION_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:instanceSpecAttrs 
    SETL message:(message + instanceSpecAttrs)
    SETL instanceSpecAttrs:("")
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Interface (UML)"
SETL interfaceObjids:(objids)
FOR i in:(interfaceObjids)
{
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(prefixVal + uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_INTERFACE_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:interfaceAttrs 
    SETL message:(message + interfaceAttrs)
    SETL interfaceAttrs:("")
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Data Type (UML)"
SETL dataTypeObjids:(objids)
FOR i in:(dataTypeObjids)
{
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(prefixVal + uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_DATA_TYPE_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:dataTypeAttrs 
    SETL message:(message + dataTypeAttrs)
    SETL dataTypeAttrs:("")
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Enumeration (UML)"
SETL enumerationObjids:(objids)
FOR i in:(enumerationObjids)
{
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(prefixVal + uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_ENUMERATION_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:enumerationAttrs 
    SETL message:(message + enumerationAttrs)
    SETL enumerationAttrs:("")
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Constraint (UML)"
SETL constraintObjids:(objids)
FOR i in:(constraintObjids)
{
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(prefixVal + uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_CONSTRAINT_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:constraintAttrs 
    SETL message:(message + constraintAttrs)
    SETL constraintAttrs:("")
}

#Connectors
CC "Core" GET_ALL_CONNECTORS modelid:(actModelId)
FOR i in:(objids)
{
    CC "Core" GET_CLASS_ID objid:(VAL i)
    CC "Core" GET_CLASS_NAME classid:(classid)
    CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL i)
    CC "Core" GET_ATTR_VAL objid:(fromobjid) attrname:"Prefix"
    SETL fromPrefix:(val)
    CC "Core" GET_ATTR_VAL objid:(fromobjid) attrname:"URI"
    SETL fromUri:(val)
    SETL fromUri:(fromPrefix + fromUri)
    CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:"Prefix"
    SETL toPrefix:(val)
    CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:"URI"
    SETL toUri:(val)
    SETL toUri:(toPrefix + toUri)
    IF(classname = "Association (UML)")
    {
        SETL message:(message + fromUri + " :umlAssociationTo " + toUri + ".\n")
    }
    IF(classname = "Composition (UML)")
    {
        SETL message:(message + fromUri + " :umlComposition " + toUri + ".\n")
    }
    IF(classname = "Aggregation (UML)")
    {
        SETL message:(message + fromUri + " :umlAggregation " + toUri + ".\n")
    }
    IF(classname = "Generalization (UML)")
    {
        SETL message:(message + fromUri + " :umlGeneralization " + toUri + ".\n")
    }
    IF(classname = "Dependency (UML)")
    {
        SETL message:(message + fromUri + " :umlDependency " + toUri + ".\n")
    }
    IF(classname = "Realization (UML)")
    {
        SETL message:(message + fromUri + " :umlRealization " + toUri + ".\n")
    }
    IF(classname = "requires Interface (UML)")
    {
        SETL message:(message + fromUri + " :umlRequiresInterface " + toUri + ".\n")
    }
    IF(classname = "has Constraint (UML)")
    {
        SETL message:(message + fromUri + " :umlHasConstraint " + toUri + ".\n")
    }
    IF(classname = "is Associationclass (UML)")
    {
        SETL message:(message + fromUri + " :umlIsAssociationClass " + toUri + ".\n")
    }
    #not addings notes, has Note
    #no support for conversations yet
}

IF (endMessage != "")
{
    SETL message:(message + endMessage)
    CC "AdoScript" VIEWBOX text:(message)
    SETL filePath:("D:\\Andrei\\ModellingTools\\WST_BPMN_Modeling_Tool\\Results\\class_trig.trig")
    CC "AdoScript" FWRITE file:(filePath) text:(message) binary:0
    #SETL filePath:("D:\\Andrei\\ModellingTools\\Threat_Modeling_Tool\\Scripts\\Results\\dfd_serialization_type.txt")
    #CC "AdoScript" FWRITE file:(filePath) text:("trig") binary:0
}
ELSE
{
    CC "AdoScript" VIEWBOX text:(message)
    SETL filePath:("D:\\Andrei\\ModellingTools\\WST_BPMN_Modeling_Tool\\Results\\class_turtle.ttl")
    CC "AdoScript" FWRITE file:(filePath) text:(message) binary:0
    #SETL filePath:("D:\\Andrei\\ModellingTools\\Threat_Modeling_Tool\\Scripts\\Results\\dfd_serialization_type.txt")
    #CC "AdoScript" FWRITE file:(filePath) text:("turtle") binary:0
}