PROCEDURE global GET_MODEL_NAMESPACES modelId: integer result: reference
{
    SETL prefixesValues:("")
    CC "Core" GET_CLASS_ID objid:(modelId)
    CC "Core" GET_CLASS_NAME classid:(classid)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"WST Model Namespaces"
    SETL modelNamespacesId:(attrid)
    #attrid
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(modelId) attrid:(modelNamespacesId)
	FOR i in:(rowids)
	{
		CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
		SETL prefixValue:(val)
		CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Dictionary"
		SETL dictionaryValue:(val)
        SETL prefixesValues:(prefixesValues + "@prefix " + prefixValue + " " + dictionaryValue + ".\n")
	}
    SETL prefixesValues:(prefixesValues + "\n")
    SETL result:(prefixesValues)
}

PROCEDURE global GET_WORKSYSTEMSNAPSHOT_ATTRIBUTES objId: integer uriVal: string result: reference
{
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":WorkSystemSnapshot" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL snapshotDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":description" + " " + "\"" + snapshotDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Goals"
    SETL snapshotGoals:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasGoals" + " " + "\"" + snapshotGoals + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Efficiency Metrics"
    SETL snapshotEfficiencyMetrics:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasEfficiencyMetrics" + " " + "\"" + snapshotEfficiencyMetrics + "\"" + ".\n")
    #SETL result:(attributesValues)
    #------
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Has Subsystem"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_INTERREFS_OF_ATTR objid:(objId) attrid:(attributeId)
    #CC "Core" GET_INTERREF objid:(objId) attrid:(attributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(attributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        FOR i from:(1) to:(intrfCount)
        {
            SETL textEx:(token(reftext, i, "REF "))
            SETL md:(token(textEx, 7, ":"))
            SETL modelIdToEnter:(token(md, 0, " "))
            SETL tobj:(token(textEx, 9, ":"))
            SETL searchedObjId:(token(tobj, 0, " "))
            CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
            IF (NOT(isopened))
            {
                CC "Modeling" OPEN modelids:(modelIdToEnter)
            }
            #CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(workSystemSnapshotObjClassId) objname:(workSystemSnapshotObjName)
            #CC "Core" GET_ATTR_VAL objid:(VAL searchedObjId) attrname:"Prefix"
            #SETL objPrefix:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL searchedObjId) attrname:"URI"
            SETL objUri:(val)
            SETL objPrefixUri:(objUri)
            SETL attributesValues:(attributesValues + uriVal + " :hasSubsystem " + objPrefixUri + ".\n")
        }
    }
    #---------------
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Work System Decomposition"
    SETL attributeId:(attrid)
    #CC "Core" GET_ALL_INTERREFS_OF_ATTR objid:(objId) attrid:(attributeId)
    CC "Core" GET_INTERREF objid:(objId) attrid:(attributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(attributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        #CC "Core" GET_ATTR_VAL objid:(modelIdToEnter) attrname:"Prefix"
        #SETL modelPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(modelIdToEnter) attrname:"URI"
        SETL modelUriValue:(val)
        SETL modelPrefixUri:(modelUriValue)
        SETL attributesValues:(attributesValues + uriVal + " :decomposedIn " + modelPrefixUri + ".\n")
    }

    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
        
		#SET attributesValues:(attributesValues + uriVal + " :hasProperties " + "[" + " :visibility " + "\"" + visibility + "\"" + "; " + ":derived " + "\"" + derived + "\"" + "; "  + ":naming " + "\"" + naming + "\"" + "; " + ":type " + "\"" + type + "\"" + "; " + ":multiplicity " + "\"" + multiplicity + "\"" + "; " + ":defaultValue " + "\"" + defaultValue + "\"" + "; " + ":propertyModifiers " + "\"" + propertyModifiers + "\"" + "; " + "a" + " :ClassProperty " + "].\n")
    }
    #-------------------------------------------
    SETL result:(attributesValues)
}

PROCEDURE global GET_INFRASTRUCTUREELEMENT_INFO objectId: integer uriVal: string message: string result: reference
{
    SETL attributesValues:("")
    #CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"Prefix"
    #SETL infrastructureElementPrefix:(val)
    CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"URI"
    SETL infrastructureElementUri:(val)
    SETL infrastructureElementPrefixUri:(infrastructureElementUri)
    CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"Name"
    SETL infrastructureElementName:(val)
    CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"Description"
    SETL infrastructureElementDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " :supportedBy " + infrastructureElementPrefixUri + ".\n")
    SETL attributesValues:(attributesValues + infrastructureElementPrefixUri + " a " + ":InfrastructureElement" + ".\n")
    SETL attributesValues:(attributesValues + infrastructureElementPrefixUri + " rdfs:label " + "\"" + infrastructureElementName + "\"" + ".\n")
    SETL attributesValues:(attributesValues + infrastructureElementPrefixUri + " :description " + "\"" + infrastructureElementDescription + "\"" + "^^" + "xsd:string" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objectId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objectId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }
    SETL result:(message + attributesValues)
}

PROCEDURE global GET_ENVIRONMENTELEMENT_INFO objectId: integer uriVal: string message: string result: reference
{
    SETL attributesValues:("")
    #CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"Prefix"
    #SETL environmentElementPrefix:(val)
    CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"URI"
    SETL environmentElementUri:(val)
    SETL environmentElemenPrefixUri:(environmentElementUri)
    CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"Name"
    SETL environmentElementName:(val)
    CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"Description"
    SETL environmentElementDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " :subjectedTo " + environmentElemenPrefixUri + ".\n")
    SETL attributesValues:(attributesValues + environmentElemenPrefixUri + " a " + ":EnvironmentElement" + ".\n")
    SETL attributesValues:(attributesValues + environmentElemenPrefixUri + " rdfs:label " + "\"" + environmentElementName + "\"" + ".\n")
    SETL attributesValues:(attributesValues + environmentElemenPrefixUri + " :description " + "\"" + environmentElementDescription + "\"" + "^^" + "xsd:string" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objectId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objectId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }
    
    SETL result:(message + attributesValues)
}

PROCEDURE global GET_STRATEGYELEMENT_INFO objectId: integer uriVal: string message: string result: reference
{
    SETL attributesValues:("")
    #CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"Prefix"
    #SETL strategyElementPrefix:(val)
    CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"URI"
    SETL strategyElementUri:(val)
    SETL strategyElementPrefixUri:(strategyElementUri)
    CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"Name"
    SETL strategyElementName:(val)
    CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"Description"
    SETL strategyElementDescription:(val)
    CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"Type"
    SETL strategyElementType:(val)
    SETL attributesValues:(attributesValues + uriVal + " :drivenBy " + strategyElementPrefixUri + ".\n")
    SETL attributesValues:(attributesValues + strategyElementPrefixUri + " a " + ":StrategyElement" + ".\n")
    SETL attributesValues:(attributesValues + strategyElementPrefixUri + " rdfs:label " + "\"" + strategyElementName + "\"" + ".\n")
    SETL attributesValues:(attributesValues + strategyElementPrefixUri + " :description " + "\"" + strategyElementDescription + "\"" + "^^" + "xsd:string" + ".\n")
    SETL attributesValues:(attributesValues + strategyElementPrefixUri + " :isOfType " + "\"" + strategyElementType + "\"" + "^^" + "xsd:string" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objectId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objectId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }
    
    SETL result:(message + attributesValues)
}

PROCEDURE global LINK_WORKSYSTEMSNAPSHOT objectId: integer uriVal: string message: string result: reference
{
    #CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"Prefix"
    #SETL workSystemSnapshotElementPrefix:(val)
    CC "Core" GET_ATTR_VAL objid:(objectId) attrname:"URI"
    SETL workSystemSnapshotElementUri:(val)
    SETL workSystemSnapshotElementPrefixUri:(workSystemSnapshotElementUri)
    SETL result:(message + uriVal + " :hasSubsystem " + workSystemSnapshotElementPrefixUri + ".\n")
}

#---------------------------------------

CC "Modeling" GET_ACT_MODEL
SETL actModelId: (modelid)

#CC "Core" GET_ATTR_VAL objid:(actModelId) attrname:"Prefix"
#SETL modelPrefix:(val)

CC "Core" GET_ATTR_VAL objid:(actModelId) attrname:"URI"
SETL modelUri:(val)

SETL namespaces:("")
SETL endMessage:("")
GET_MODEL_NAMESPACES modelId:(actModelId) result:namespaces

IF(modelUri != "")
{
    SETL message:(modelUri + "\n" + "{" + "\n")
    SETL message:(namespaces + message)
    SETL endMessage:("}")
    #CC "AdoScript" VIEWBOX text:("Bobr Kurwa")

}
ELSE
{
    SETL message:("")
    SETL message:(message + namespaces)
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"WorkSystemSnapshot"
SETL workSystemSnapshotObjids:(objids)
FOR i in:(workSystemSnapshotObjids)
{
    #CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    #SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_WORKSYSTEMSNAPSHOT_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:objAttrs
    SETL message:(message + objAttrs)
    SETL objAttrs:("")

    #Connectors
    CC "Core" GET_CONNECTORS objid:(VAL i) out
    SETL connectorsIds:(objids)
    FOR j in:(connectorsIds)
    {
        CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL j)
        IF(j != i)
        {
            CC "Core" GET_CLASS_ID objid:(toobjid)
            CC "Core" GET_CLASS_NAME classid:(classid)
            IF(classname = "InfrastructureElement")
            {
                GET_INFRASTRUCTUREELEMENT_INFO objectId:(toobjid) uriVal:(uriPrefix) message:(message) result: message
            }
            IF(classname = "EnvironmentElement")
            {
                GET_ENVIRONMENTELEMENT_INFO objectId:(toobjid) uriVal:(uriPrefix) message:(message) result: message
            }
            IF(classname = "StrategyElement")
            {
                GET_STRATEGYELEMENT_INFO objectId:(toobjid) uriVal:(uriPrefix) message:(message) result: message
            }
            IF(classname = "WorkSystemSnapshot")
            {
                LINK_WORKSYSTEMSNAPSHOT objectId:(toobjid) uriVal:(uriPrefix) message:(message) result: message
            }

        }
    }
}
#CC "AdoScript" VIEWBOX text:(message)
IF (endMessage != "")
{
    SETL message:(message + endMessage)
    CC "AdoScript" VIEWBOX text:(message)
    SETL trigFilePath:("D:\\Andrei\\ModellingTools\\WST_BPMN_Modeling_Tool\\Results\\wso_trig.trig")
    SETL turtleFilePath:("D:\\Andrei\\ModellingTools\\WST_BPMN_Modeling_Tool\\Results\\wso_turtle.ttl")
    CC "AdoScript" FWRITE file:(trigFilePath) text:(message) binary:0
    CC "AdoScript" FWRITE file:(turtleFilePath) text:("") binary:0
    #SETL filePath:("D:\\Andrei\\ModellingTools\\Threat_Modeling_Tool\\Scripts\\Results\\dfd_serialization_type.txt")
    #CC "AdoScript" FWRITE file:(filePath) text:("trig") binary:0
}
ELSE
{
    CC "AdoScript" VIEWBOX text:(message)
    SETL trigFilePath:("D:\\Andrei\\ModellingTools\\WST_BPMN_Modeling_Tool\\Results\\wso_trig.trig")
    SETL turtleFilePath:("D:\\Andrei\\ModellingTools\\WST_BPMN_Modeling_Tool\\Results\\wso_turtle.ttl")
    CC "AdoScript" FWRITE file:(trigFilePath) text:("") binary:0
    CC "AdoScript" FWRITE file:(turtleFilePath) text:(message) binary:0
    #SETL filePath:("D:\\Andrei\\ModellingTools\\Threat_Modeling_Tool\\Scripts\\Results\\dfd_serialization_type.txt")
    #CC "AdoScript" FWRITE file:(filePath) text:("turtle") binary:0
}