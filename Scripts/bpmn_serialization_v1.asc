PROCEDURE global GET_MODEL_NAMESPACES modelId: integer result: reference
{
    SETL prefixesValues:("")
    CC "Core" GET_CLASS_ID objid:(modelId)
    CC "Core" GET_CLASS_NAME classid:(classid)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"WST Model Namespaces"
    SETL modelNamespacesId:(attrid)
    #attrid
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(modelId) attrid:(modelNamespacesId)
	FOR i in:(rowids)
	{
		CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
		SETL prefixValue:(val)
		CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Dictionary"
		SETL dictionaryValue:(val)
        SETL prefixesValues:(prefixesValues + "@prefix " + prefixValue + " " + dictionaryValue + ".\n")
	}
    SETL prefixesValues:(prefixesValues + "\n")
    SETL result:(prefixesValues)
}
#Gateway and Non-Exclusive Gateway
PROCEDURE global GET_TASK_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":Task" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Order"
    SETL taskOrder:(STR val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":order" + " " + "\"" + taskOrder + "\"" + "^^" + "xsd:int" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL taskDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":description" + " " + "\"" + taskDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL taskComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasComment" + " " + "\"" + taskComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL taskOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasOpenQuestions" + " " + "\"" + taskOpenQuestions + "\"" + ".\n")
    #not added make decision attribute. to see if needed
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Task type"
    SETL taskType:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":type" + " " + "\"" + taskType + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Auditing"
    SETL auditing:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":auditing" + " " + "\"" + auditing + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Monitoring"
    SETL monitoring:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":monitoring" + " " + "\"" + monitoring + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"For compensation"
    SETL forCompensation:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":forCompensation" + " " + "\"" + forCompensation + "\"" + ".\n")
    #not serializing automated service details
    #referenced message
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Referenced message"
    SETL referencedMessageAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(referencedMessageAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(referencedMessageAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objUri)
        SETL attributesValues:(attributesValues + uriVal + " :referencedMessage " + objPrefixUri + ".\n")
    }
    #not serializing receive task details
    #not serializing call activity details
    #not serializing the additional triples attribute
    #not serializing loop conditions
    #times costs
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Execution time"
    SETL executionTime:(STR val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasExecutionTime" + " " + "\"" + executionTime + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Waiting time"
    SETL waitingTime:(STR val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasWaitingTime" + " " + "\"" + waitingTime + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Resting time"
    SETL restingTime:(STR val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasRestingTime" + " " + "\"" + restingTime + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Transport time"
    SETL transportTime:(STR val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasTransportTime" + " " + "\"" + transportTime + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Costs"
    SETL costs:(STR val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasCosts" + " " + "\"" + costs + "\"" + ".\n")
    #Raci properties
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Responsible"
    SETL responsibleAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(responsibleAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(responsibleAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objUri)
        SETL attributesValues:(attributesValues + uriVal + " :hasResponsible " + objPrefixUri + ".\n")
    }
    #
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Accountable"
    SETL accountableAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(accountableAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(accountableAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objUri)
        SETL attributesValues:(attributesValues + uriVal + " :hasAccountable " + objPrefixUri + ".\n")
    }
    #
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Consult"
    SETL consultAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(consultAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(consultAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objUri)
        SETL attributesValues:(attributesValues + uriVal + " :consult " + objPrefixUri + ".\n")
    }
    #
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Inform"
    SETL informAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(informAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(informAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objUri)
        SETL attributesValues:(attributesValues + uriVal + " :inform " + objPrefixUri + ".\n")
    }
    #not serializing simulation settings
    #not serializing simulation results
    #not serializing additional triples
    #not serializing automated service to flowchart or Petri Net
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Used system"
    SETL usedSystemAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(usedSystemAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(usedSystemAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objUri)
        SETL attributesValues:(attributesValues + uriVal + " :usedSystem " + objPrefixUri + ".\n")
    }
    #not serializing used cases
    #not serializing make decision

    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL taskGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":generalPurpose" + " " + "\"" + taskGeneralPurpose + "\"" + ".\n")

    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + objPrefixUri + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + objPrefixUri + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }

    SETL result:(attributesValues)
}

PROCEDURE global GET_STARTEVENT_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":StartEvent" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Order"
    SETL startEventOrder:(STR val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":order" + " " + "\"" + startEventOrder + "\"" + "^^" + "xsd:int" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL startEventDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":description" + " " + "\"" + startEventDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL startEventComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasComment" + " " + "\"" + startEventComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL startEventOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasOpenQuestions" + " " + "\"" + startEventOpenQuestions + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Type"
    SETL eventType:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":type" + " " + "\"" + eventType + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Trigger"
    SETL trigger:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasTrigger" + " " + "\"" + trigger + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Multiple trigger"
    SETL multipleTrigger:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasMultipleTrigger" + " " + "\"" + multipleTrigger + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Auditing"
    SETL auditing:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":auditing" + " " + "\"" + auditing + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Monitoring"
    SETL monitoring:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":monitoring" + " " + "\"" + monitoring + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Object type"
    SETL objectType:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":objectType" + " " + "\"" + objectType + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Collection"
    SETL collection:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":collection" + " " + "\"" + collection + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Details"
    SETL details:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":details" + " " + "\"" + details + "\"" + ".\n")
    #not serializing additional properties
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Quantity"
    SETL quantity:(STR val)
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Time period"
    SETL timePeriod:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":executes" + " " + "[ " + ":quantity " + quantity + "; " + ":timePeriod " + "\"" + timePeriod + "\"" + " ]" + ".\n")
    #not serializing from workload analysis

    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL eventGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":generalPurpose" + " " + "\"" + eventGeneralPurpose + "\"" + ".\n")

    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }

    SETL result:(attributesValues)
}

PROCEDURE global GET_ENDEVENT_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":StartEvent" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Order"
    SETL endEventOrder:(STR val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":order" + " " + "\"" + endEventOrder + "\"" + "^^" + "xsd:int" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL endEventDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":description" + " " + "\"" + endEventDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL endEventComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasComment" + " " + "\"" + endEventComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL endEventOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasOpenQuestions" + " " + "\"" + endEventOpenQuestions + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Trigger"
    SETL eventType:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":type" + " " + "\"" + eventType + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Auditing"
    SETL auditing:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":auditing" + " " + "\"" + auditing + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Monitoring"
    SETL monitoring:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":monitoring" + " " + "\"" + monitoring + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Object type"
    SETL objectType:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":objectType" + " " + "\"" + objectType + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Collection"
    SETL collection:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":collection" + " " + "\"" + collection + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Details"
    SETL details:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":details" + " " + "\"" + details + "\"" + ".\n")
    #not serializing additional properties
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL eventGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":generalPurpose" + " " + "\"" + eventGeneralPurpose + "\"" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }
    
    SETL result:(attributesValues)
}

PROCEDURE global GET_SUBPROCESS_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":SubProcess" + ".\n")
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Referenced subprocess"
    SETL referencedSubprocessAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(referencedSubprocessAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(referencedSubprocessAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        #CC "Core" GET_ATTR_VAL objid:(modelIdToEnter) attrname:"Prefix"
        #SETL modelPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(modelIdToEnter) attrname:"URI"
        SETL modelUriValue:(val)
        SETL modelPrefixUri:(modelUriValue)
        SETL attributesValues:(attributesValues + uriVal + " :referencedIn " + modelPrefixUri + ".\n")
    }
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Order"
    SETL subProcessOrder:(STR val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":order" + " " + "\"" + subProcessOrder + "\"" + "^^" + "xsd:int" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL subProcessDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":description" + " " + "\"" + subProcessDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL subProcessComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasComment" + " " + "\"" + subProcessComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL subProcessOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasOpenQuestions" + " " + "\"" + subProcessOpenQuestions + "\"" + ".\n")
    #not added make decision attribute. to see if needed
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Sub-Process type"
    SETL subProcessType:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":type" + " " + "\"" + subProcessType + "\"" + ".\n")

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Work System Link"
    SETL workSystemLinkAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(workSystemLinkAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(workSystemLinkAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objUri)
        SETL attributesValues:(attributesValues + uriVal + " :hasWorkSystemLink " + objPrefixUri + ".\n")
    }
    
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Global task"
    SETL globalTask:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":globalTask" + " " + "\"" + globalTask + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Auditing"
    SETL auditing:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":auditing" + " " + "\"" + auditing + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Monitoring"
    SETL monitoring:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":monitoring" + " " + "\"" + monitoring + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"For compensation"
    SETL forCompensation:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":forCompensation" + " " + "\"" + forCompensation + "\"" + ".\n")
    #not serializing Ad-hoc details
    #not serializng Loop details
    #not serializing additional properties
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL subProcessGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":generalPurpose" + " " + "\"" + subProcessGeneralPurpose + "\"" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }
    
    SETL result:(attributesValues)
}

PROCEDURE global GET_INTERMEDIATEEVENT_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":IntermediateEvent" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Order"
    SETL intermediateEventOrder:(STR val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":order" + " " + "\"" + intermediateEventOrder + "\"" + "^^" + "xsd:int" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL intermediateEventDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":description" + " " + "\"" + intermediateEventDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL intermediateEventComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasComment" + " " + "\"" + intermediateEventComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL intermediateEventOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasOpenQuestions" + " " + "\"" + intermediateEventOpenQuestions + "\"" + ".\n")
    
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Attached to"
    SETL attachedToAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(attachedToAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(attachedToAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objUri)
        SETL attributesValues:(attributesValues + uriVal + " :attachedTo " + objPrefixUri + ".\n")
    }
    
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Type (sequence)"
    SETL eventTypeSequence:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":typeSequence" + " " + "\"" + eventTypeSequence + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Type (boundary)"
    SETL eventTypeBoundary:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":typeBoundary" + " " + "\"" + eventTypeBoundary + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Trigger"
    SETL trigger:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":trigger" + " " + "\"" + trigger + "\"" + ".\n")
    #not serializing cancel activity and multiple trigger
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Auditing"
    SETL auditing:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":auditing" + " " + "\"" + auditing + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Monitoring"
    SETL monitoring:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":monitoring" + " " + "\"" + monitoring + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Object type"
    SETL objectType:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":objectType" + " " + "\"" + objectType + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Collection"
    SETL collection:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":collection" + " " + "\"" + collection + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Details"
    SETL details:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":details" + " " + "\"" + details + "\"" + ".\n")
    #not serializing additional properties
    #not serializing additional triples
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL eventGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":generalPurpose" + " " + "\"" + eventGeneralPurpose + "\"" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }
    
    SETL result:(attributesValues)
}

PROCEDURE global GET_DATAOBJECT_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":DataObject" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL dataObjectDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":description" + " " + "\"" + dataObjectDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL dataObjectComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasComment" + " " + "\"" + dataObjectComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL dataObjectOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasOpenQuestions" + " " + "\"" + dataObjectOpenQuestions + "\"" + ".\n")
    #Not serializing DMN Input Data
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Auditing"
    SETL auditing:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":auditing" + " " + "\"" + auditing + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Monitoring"
    SETL monitoring:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":monitoring" + " " + "\"" + monitoring + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Data type"
    SETL dataType:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":dataType" + " " + "\"" + dataType + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Collection"
    SETL collection:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":collection" + " " + "\"" + collection + "\"" + ".\n")

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Referenced input data (optional)"
    SETL referencedInputDataOptAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(referencedInputDataOptAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(referencedInputDataOptAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objUri)
        SETL attributesValues:(attributesValues + uriVal + " :referencedInputDataOpt " + objPrefixUri + ".\n")
    }

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Referenced input data (while executing)"
    SETL referencedInputDataExecAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(referencedInputDataExecAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(referencedInputDataExecAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objUri)
        SETL attributesValues:(attributesValues + uriVal + " :referencedInputDataExec " + objPrefixUri + ".\n")
    }

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Referenced output data (optional)"
    SETL referencedOutputDataOptAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(referencedOutputDataOptAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(referencedOutputDataOptAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objUri)
        SETL attributesValues:(attributesValues + uriVal + " :referencedOutputDataOpt " + objPrefixUri + ".\n")
    }

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Referenced output data (while executing)"
    SETL referencedOutputDataExecAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(referencedOutputDataExecAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(referencedOutputDataExecAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objUri)
        SETL attributesValues:(attributesValues + uriVal + " :referencedOutputDataExec " + objPrefixUri + ".\n")
    }
    
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Unlimited"
    SETL unlimited:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":unlimited" + " " + "\"" + unlimited + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Capacity"
    SETL capacity:(STR val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":capacity" + " " + "\"" + capacity + "\"" + ".\n")

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Referenced data store (global)"
    SETL referencedDataStoreAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(referencedDataStoreAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(referencedDataStoreAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objUri)
        SETL attributesValues:(attributesValues + uriVal + " :referencedDataStore " + objPrefixUri + ".\n")
    }
    #not serializing additional properties
    #not serializing additional triples
    #not serializing DMN Input
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Details"
    SETL details:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":details" + " " + "\"" + details + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL dataObjectGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":generalPurpose" + " " + "\"" + dataObjectGeneralPurpose + "\"" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }
    
    SETL result:(attributesValues)
}

PROCEDURE global GET_MESSAGE_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":Message" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL messageDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":description" + " " + "\"" + messageDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL messageComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasComment" + " " + "\"" + messageComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL messageOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasOpenQuestions" + " " + "\"" + messageOpenQuestions + "\"" + ".\n")
    #Not serializing DMN Input Data
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Message type"
    SETL messageType:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":messageType" + " " + "\"" + messageType + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Object type"
    SETL objectType:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":objectType" + " " + "\"" + objectType + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Collection"
    SETL collection:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":collection" + " " + "\"" + collection + "\"" + ".\n")
    #not serializing additional properties
    #not serializing additional triples
    #not serializing Details (ER Model)
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL messageGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":generalPurpose" + " " + "\"" + messageGeneralPurpose + "\"" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }
    
    SETL result:(attributesValues)
}

PROCEDURE global GET_POOL_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":Pool" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL poolDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":description" + " " + "\"" + poolDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL poolComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasComment" + " " + "\"" + poolComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL poolOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasOpenQuestions" + " " + "\"" + poolOpenQuestions + "\"" + ".\n") 

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Partner Reference"
    SETL partnerReferenceAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(partnerReferenceAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(partnerReferenceAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objUri)
        SETL attributesValues:(attributesValues + uriVal + " :referencesPartner " + objPrefixUri + ".\n")
    }

    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Process type"
    SETL processType:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasProcessType" + " " + "\"" + processType + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Auditing"
    SETL auditing:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":auditing" + " " + "\"" + auditing + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Monitoring"
    SETL monitoring:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":monitoring" + " " + "\"" + monitoring + "\"" + ".\n")

    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL poolGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":generalPurpose" + " " + "\"" + poolGeneralPurpose + "\"" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }

    SETL result:(attributesValues)
}

PROCEDURE global GET_LANE_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":Lane" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL laneDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":description" + " " + "\"" + laneDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL laneComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasComment" + " " + "\"" + laneComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL laneOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasOpenQuestions" + " " + "\"" + laneOpenQuestions + "\"" + ".\n") 
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL laneGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":generalPurpose" + " " + "\"" + laneGeneralPurpose + "\"" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }
    
    SETL result:(attributesValues)
}

PROCEDURE global GET_COLLAPSEDPOOL_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":CollapsedPool" + ".\n")

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Referenced process"
    SETL referencedProcessAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(referencedProcessAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(referencedProcessAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        #CC "Core" GET_ATTR_VAL objid:(modelIdToEnter) attrname:"Prefix"
        #SETL modelPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(modelIdToEnter) attrname:"URI"
        SETL modelUriValue:(val)
        SETL modelPrefixUri:(modelUriValue)
        SETL attributesValues:(attributesValues + uriVal + " :referencesProcess " + modelPrefixUri + ".\n")
    }

    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL poolDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":description" + " " + "\"" + poolDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL poolComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasComment" + " " + "\"" + poolComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL poolOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasOpenQuestions" + " " + "\"" + poolOpenQuestions + "\"" + ".\n") 

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Partner Reference"
    SETL partnerReferenceAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(partnerReferenceAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(partnerReferenceAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        #CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        #SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objUri)
        SETL attributesValues:(attributesValues + uriVal + " :referencesPartner " + objPrefixUri + ".\n")
    }

    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Process type"
    SETL processType:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":hasProcessType" + " " + "\"" + processType + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Auditing"
    SETL auditing:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":auditing" + " " + "\"" + auditing + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Monitoring"
    SETL monitoring:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":monitoring" + " " + "\"" + monitoring + "\"" + ".\n")

    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL poolGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " " + ":generalPurpose" + " " + "\"" + poolGeneralPurpose + "\"" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }

    SETL result:(attributesValues)
}
#-----------------------------------------------------------

CC "Modeling" GET_ACT_MODEL
SETL actModelId: (modelid)

#CC "Core" GET_ATTR_VAL objid:(actModelId) attrname:"Prefix"
#SETL modelPrefix:(val)

CC "Core" GET_ATTR_VAL objid:(actModelId) attrname:"URI"
SETL modelUri:(val)

SETL namespaces:("")
SETL endMessage:("")

GET_MODEL_NAMESPACES modelId:(actModelId) result:namespaces

IF(modelUri != "")
{
    SETL message:(modelUri + "\n" + "{" + "\n")
    SETL message:(namespaces + message)
    SETL endMessage:("}")

}
ELSE
{
    SETL message:("")
    SETL message:(message + namespaces)
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Start Event (BPMN)"
SETL startEventObjids:(objids)
FOR i in:(startEventObjids)
{
    #CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    #SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_STARTEVENT_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:startEventAttrs 
    SETL message:(message + startEventAttrs)
    SETL startEventAttrs:("")
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Task (BPMN)"
SETL taskObjids:(objids)
FOR i in:(taskObjids)
{
    #CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    #SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_TASK_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:taskAttrs 
    SETL message:(message + taskAttrs)
    SETL taskAttrs:("")
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"End Event (BPMN)"
SETL endEventObjids:(objids)
FOR i in:(endEventObjids)
{
    #CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    #SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_ENDEVENT_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:endEventAttrs 
    SETL message:(message + endEventAttrs)
    SETL endEventAttrs:("")
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Sub-Process (BPMN)"
SETL subProcessObjids:(objids)
FOR i in:(subProcessObjids)
{
    #CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    #SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_SUBPROCESS_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:subProcessAttrs 
    SETL message:(message + subProcessAttrs)
    SETL subProcessAttrs:("")
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Intermediate Event (BPMN)"
SETL intermediateEventObjids:(objids)
FOR i in:(intermediateEventObjids)
{
    #CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    #SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_INTERMEDIATEEVENT_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:intermediateEventAttrs 
    SETL message:(message + intermediateEventAttrs)
    SETL intermediateEventAttrs:("")
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Data Object (BPMN)"
SETL dataObjectObjids:(objids)
FOR i in:(dataObjectObjids)
{
    #CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    #SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_DATAOBJECT_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:dataObjectAttrs 
    SETL message:(message + dataObjectAttrs)
    SETL dataObjectAttrs:("")
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Message (BPMN)"
SETL messageObjids:(objids)
FOR i in:(messageObjids)
{
    #CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    #SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_MESSAGE_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:messageAttrs 
    SETL message:(message + messageAttrs)
    SETL messageAttrs:("")
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Pool (BPMN)"
SETL poolObjids:(objids)
FOR i in:(poolObjids)
{
    #CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    #SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_POOL_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:poolAttrs 
    SETL message:(message + poolAttrs)
    SETL poolAttrs:("")
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Pool (collapsed) (BPMN)"
SETL poolColObjids:(objids)
FOR i in:(poolColObjids)
{
    #CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    #SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_COLLAPSEDPOOL_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:poolColAttrs 
    SETL message:(message + poolColAttrs)
    SETL poolColAttrs:("")
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Lane (BPMN)"
SETL laneObjids:(objids)
FOR i in:(laneObjids)
{
    #CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    #SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_LANE_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:laneAttrs 
    SETL message:(message + laneAttrs)
    SETL laneAttrs:("")
}

#to get data from connectors who have denominations as well?
#Connectors
CC "Core" GET_ALL_CONNECTORS modelid:(actModelId)
FOR i in:(objids)
{
    CC "Core" GET_CLASS_ID objid:(VAL i)
    CC "Core" GET_CLASS_NAME classid:(classid)
    CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL i)
    #CC "Core" GET_ATTR_VAL objid:(fromobjid) attrname:"Prefix"
    #SETL fromPrefix:(val)
    CC "Core" GET_ATTR_VAL objid:(fromobjid) attrname:"URI"
    SETL fromUri:(val)
    SETL fromUri:(fromUri)
    #CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:"Prefix"
    #SETL toPrefix:(val)
    CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:"URI"
    SETL toUri:(val)
    SETL toUri:(toUri)
    IF(classname = "Subsequent")
    {
        SETL message:(message + fromUri + " :isFollowedBy " + toUri + ".\n")
    }
    IF(classname = "Message Flow (BPMN)")
    {
        CC "Core" GET_CLASS_ID objid:(toobjid)
        CC "Core" GET_CLASS_NAME classid:(classid)
        SETL toClass:(classname)
        CC "Core" GET_CLASS_ID objid:(fromobjid)
        CC "Core" GET_CLASS_NAME classid:(classid)
        SETL fromClass:(classname)
        IF(fromClass = "Task (BPMN)" AND toClass = "Message (BPMN)")
        {
            SETL message:(message + fromUri + " :outputsMessage " + toUri + ".\n")
        }
        ELSIF(fromClass = "Message (BPMN)" AND toClass = "Task (BPMN)")
        {
            SETL message:(message + fromUri + " :usedAsInputMessageBy " + toUri + ".\n")
        }
        ELSE 
        {
            SETL message:(message + fromUri + " :sendsMessage " + toUri + ".\n")
        }
    }
    IF(classname = "Association (BPMN)")
    {
        SETL message:(message + fromUri + " :associatedTo " + toUri + ".\n")
    }
    IF(classname = "Data Association (BPMN)")
    {
        CC "Core" GET_CLASS_ID objid:(toobjid)
        CC "Core" GET_CLASS_NAME classid:(classid)
        SETL toClass:(classname)
        CC "Core" GET_CLASS_ID objid:(fromobjid)
        CC "Core" GET_CLASS_NAME classid:(classid)
        SETL fromClass:(classname)
        IF(fromClass = "Task (BPMN)" AND toClass = "Data Object (BPMN)")
        {
            SETL message:(message + fromUri + " :outputsDataTo " + toUri + ".\n")
        }
        ELSIF(fromClass = "Data Object (BPMN)" AND toClass = "Task (BPMN)")
        {
            SETL message:(message + fromUri + " :usedAsInputDataBy " + toUri + ".\n")
        }
        ELSE 
        {
            SETL message:(message + fromUri + " :associatedwithDataTo " + toUri + ".\n")
        }
    }
    #not addings notes, has Note
    #no support for conversations yet
}

#to add pools, lanes, all connectors
FOR i in:(poolObjids)
{
    #CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:("Prefix")
    #SETL poolPrefix:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:("URI")
    SETL poolUri:(val)
    SETL poolUri:(poolUri)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:("Name")
    SETL poolName:(val)
    SETL aqlExpr:("{" + "\"" + poolName + "\"" + ":\"Pool (BPMN)" + "\"" + "}<-" + "\"" + "Is inside" + "\"")
    CC "AQL" EVAL_AQL_EXPRESSION expr:(aqlExpr) modelid:(actModelId)
    SETL objids:(objids)
    FOR i in:(objids)
    {
        #CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:("Prefix")
        #SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:("URI")
        SETL objUri:(val)
        SETL objUri:(objUri)
        SETL message:(message + objUri + " :isInside " + poolUri + ".\n")
    }
}

FOR i in:(poolColObjids)
{
    #CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:("Prefix")
    #SETL poolPrefix:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:("URI")
    SETL poolUri:(val)
    SETL poolUri:(poolUri)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:("Name")
    SETL poolName:(val)
    SETL aqlExpr:("{" + "\"" + poolName + "\"" + ":\"Pool (collapsed) (BPMN)" + "\"" + "}<-" + "\"" + "Is inside" + "\"")
    CC "AQL" EVAL_AQL_EXPRESSION expr:(aqlExpr) modelid:(actModelId)
    SETL objids:(objids)
    FOR i in:(objids)
    {
        #CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:("Prefix")
        #SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:("URI")
        SETL objUri:(val)
        SETL objUri:(objUri)
        SETL message:(message + objUri + " :isInside " + poolUri + ".\n")
    }
}

FOR i in:(laneObjids)
{
    #CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:("Prefix")
    #SETL lanePrefix:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:("URI")
    SETL laneUri:(val)
    SETL laneUri:(laneUri)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:("Name")
    SETL laneName:(val)
    SETL aqlExpr:("{" + "\"" + laneName + "\"" + ":\"Lane (BPMN)" + "\"" + "}<-" + "\"" + "Is inside" + "\"")
    CC "AQL" EVAL_AQL_EXPRESSION expr:(aqlExpr) modelid:(actModelId)
    SETL objids:(objids)
    FOR i in:(objids)
    {
        #CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:("Prefix")
        #SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:("URI")
        SETL objUri:(val)
        SETL objUri:(objUri)
        SETL message:(message + objUri + " :isInside " + laneUri + ".\n")
    }
}

IF (endMessage != "")
{
    SETL message:(message + endMessage)
    CC "AdoScript" VIEWBOX text:(message)
    SETL filePath:("D:\\Andrei\\ModellingTools\\WST_BPMN_Modeling_Tool\\Results\\bpmn_trig.trig")
    CC "AdoScript" FWRITE file:(filePath) text:(message) binary:0
    #SETL filePath:("D:\\Andrei\\ModellingTools\\Threat_Modeling_Tool\\Scripts\\Results\\dfd_serialization_type.txt")
    #CC "AdoScript" FWRITE file:(filePath) text:("trig") binary:0
}
ELSE
{
    CC "AdoScript" VIEWBOX text:(message)
    SETL filePath:("D:\\Andrei\\ModellingTools\\WST_BPMN_Modeling_Tool\\Results\\bpmn_turtle.ttl")
    CC "AdoScript" FWRITE file:(filePath) text:(message) binary:0
    #SETL filePath:("D:\\Andrei\\ModellingTools\\Threat_Modeling_Tool\\Scripts\\Results\\dfd_serialization_type.txt")
    #CC "AdoScript" FWRITE file:(filePath) text:("turtle") binary:0
}