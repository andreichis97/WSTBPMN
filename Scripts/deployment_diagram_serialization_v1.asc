PROCEDURE global GET_NODE_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":Node" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Anonymous"
    SETL nodeAnonymous:(val)
    SETL attributesValues:(attributesValues + uriVal + " :anonymous " + "\"" + nodeAnonymous + ".\n")
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Referenced node"
    SETL referencedNodeAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(referencedNodeAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(referencedNodeAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objPrefix + objUri)
        SETL attributesValues:(attributesValues + uriVal + " :referencedNode " + objPrefixUri + ".\n")
    }
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL nodeDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " :description " + "\"" + nodeDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL nodeComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasComment " + "\"" + nodeComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL nodeOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasOpenQuestions " + "\"" + nodeOpenQuestions + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Visibility"
    SETL nodeVisibility:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasVisibility " + "\"" + nodeVisibility + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Extended property"
    SETL nodeExtendedProperty:(val)
    SETL attributesValues:(attributesValues + uriVal + " :extendedProperty " + "\"" + nodeExtendedProperty + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"User defined properties"
    SETL nodeUserDefinedProperties:(val)
    SETL attributesValues:(attributesValues + uriVal + " :userDefinedProperties " + "\"" + nodeUserDefinedProperties + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Type"
    SETL nodeType:(val)
    SETL attributesValues:(attributesValues + uriVal + " :type " + "\"" + nodeType + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsAbstract"
    SETL nodeIsAbstract:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isAbstract " + "\"" + nodeIsAbstract + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsActive"
    SETL nodeIsActive:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isActive " + "\"" + nodeIsActive + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsLeaf"
    SETL nodeIsLeaf:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isLeaf " + "\"" + nodeIsLeaf + "\"" + ".\n")

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Include"
    SETL includeAttributeId:(attrid)
    CC "Core" GET_ALL_INTERREFS_OF_ATTR objid:(objId) attrid:(includeAttributeId)
    #CC "AdoScript" VIEWBOX text:(reftext)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(includeAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        #CC "AdoScript" VIEWBOX text:(tobjname)
        FOR i from:(1) to:(intrfCount)
        {
            #users should never use : in names
            SETL textEx:(token(reftext, i, "REF "))
            SETL md:(token(textEx, 7, ":"))
            SETL modelIdToEnter:(token(md, 0, " "))
            ####
            #SETL searchRes:(search(textEx, "tmodelid:", 0)) for further reference
            #CC "AdoScript" VIEWBOX text:(searchRes)
            #SETL k:(search + 9)
            #SETL vzz:(token(textEx, k, ":"))
            #CC "AdoScript" VIEWBOX text:(vzz)
            ####
            SETL tobj:(token(textEx, 9, ":"))
            SETL searchedObjId:(token(tobj, 0, " "))
            CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
            IF (NOT(isopened))
            {
                CC "Modeling" OPEN modelids:(modelIdToEnter)
            }
            CC "Core" GET_ATTR_VAL objid:(VAL searchedObjId) attrname:"Prefix"
            SETL objPrefix:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL searchedObjId) attrname:"URI"
            SETL objUri:(val)
            SETL objPrefixUri:(objPrefix + objUri)
            SETL attributesValues:(attributesValues + uriVal + " :includes " + objPrefixUri + ".\n")
        }
    }

    #includes placed above (inside)
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Name"
    SETL objName:(val)
    SETL aqlExpr:("{" + "\"" + objName + "\"" + ":\"Node (UML)" + "\"" + "}<-" + "\"" + "Is inside" + "\"")
    CC "AQL" EVAL_AQL_EXPRESSION expr:(aqlExpr) modelid:(actModelId)
    SETL insideObjids:(objids)
    FOR i in:(insideObjids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
        SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objPrefix + objUri)
        SETL attributesValues:(attributesValues + uriVal + " :includes " + objPrefixUri + ".\n")
    }
    #--- 

    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL nodeGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " :generalPurpose " + "\"" + nodeGeneralPurpose + "\"" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }
    

    SETL result:(attributesValues)
}

PROCEDURE global GET_COMPONENT_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":Component" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Anonymous"
    SETL componentAnonymous:(val)
    SETL attributesValues:(attributesValues + uriVal + " :anonymous " + "\"" + componentAnonymous + ".\n")
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Referenced component"
    SETL referencedComponentAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(referencedComponentAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(referencedComponentAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objPrefix + objUri)
        SETL attributesValues:(attributesValues + uriVal + " :referencedComponent " + objPrefixUri + ".\n")
    }
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL componentDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " :description " + "\"" + componentDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL componentComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasComment " + "\"" + componentComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL componentOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasOpenQuestions " + "\"" + componentOpenQuestions + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Visibility"
    SETL componentVisibility:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasVisibility " + "\"" + componentVisibility + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Extended property"
    SETL componentExtendedProperty:(val)
    SETL attributesValues:(attributesValues + uriVal + " :extendedProperty " + "\"" + componentExtendedProperty + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"User defined properties"
    SETL componentUserDefinedProperties:(val)
    SETL attributesValues:(attributesValues + uriVal + " :userDefinedProperties " + "\"" + componentUserDefinedProperties + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Type"
    SETL componentType:(val)
    SETL attributesValues:(attributesValues + uriVal + " :type " + "\"" + componentType + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsAbstract"
    SETL componentIsAbstract:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isAbstract " + "\"" + componentIsAbstract + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsActive"
    SETL componentIsActive:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isActive " + "\"" + componentIsActive + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsLeaf"
    SETL componentIsLeaf:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isLeaf " + "\"" + componentIsLeaf + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsIndirectlyInstantiated"
    SETL componentIsIndirInst:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isIndirectlyInstantiated " + "\"" + componentIsIndirInst + "\"" + ".\n")

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Include"
    SETL includeAttributeId:(attrid)
    CC "Core" GET_ALL_INTERREFS_OF_ATTR objid:(objId) attrid:(includeAttributeId)
    #CC "AdoScript" VIEWBOX text:(reftext)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(includeAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        #CC "AdoScript" VIEWBOX text:(tobjname)
        FOR i from:(1) to:(intrfCount)
        {
            #users should never use : in names
            SETL textEx:(token(reftext, i, "REF "))
            SETL md:(token(textEx, 7, ":"))
            SETL modelIdToEnter:(token(md, 0, " "))
            ####
            #SETL searchRes:(search(textEx, "tmodelid:", 0)) for further reference
            #CC "AdoScript" VIEWBOX text:(searchRes)
            #SETL k:(search + 9)
            #SETL vzz:(token(textEx, k, ":"))
            #CC "AdoScript" VIEWBOX text:(vzz)
            ####
            SETL tobj:(token(textEx, 9, ":"))
            SETL searchedObjId:(token(tobj, 0, " "))
            CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
            IF (NOT(isopened))
            {
                CC "Modeling" OPEN modelids:(modelIdToEnter)
            }
            CC "Core" GET_ATTR_VAL objid:(VAL searchedObjId) attrname:"Prefix"
            SETL objPrefix:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL searchedObjId) attrname:"URI"
            SETL objUri:(val)
            SETL objPrefixUri:(objPrefix + objUri)
            SETL attributesValues:(attributesValues + uriVal + " :includes " + objPrefixUri + ".\n")
        }
    }

    #includes placed above (inside)
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Name"
    SETL objName:(val)
    SETL aqlExpr:("{" + "\"" + objName + "\"" + ":\"Component (UML)" + "\"" + "}<-" + "\"" + "Is inside" + "\"")
    CC "AQL" EVAL_AQL_EXPRESSION expr:(aqlExpr) modelid:(actModelId)
    SETL insideObjids:(objids)
    FOR i in:(insideObjids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
        SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objPrefix + objUri)
        SETL attributesValues:(attributesValues + uriVal + " :includes " + objPrefixUri + ".\n")
    }
    #--- 

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Structure"
    SETL structureAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(structureAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(structureAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        CC "Core" GET_ATTR_VAL objid:(modelIdToEnter) attrname:"Prefix"
        SETL modelPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(modelIdToEnter) attrname:"URI"
        SETL modelUriValue:(val)
        SETL modelPrefixUri:(modelPrefix + modelUriValue)
        SETL attributesValues:(attributesValues + uriVal + " :hasStructureDefinedIn " + modelPrefixUri + ".\n")
    }

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Properties"
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Visibility"
		SETL visibility:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Derived"
		SETL derived:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Naming"
		SETL naming:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Type"
		SETL type:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Multiplicity"
		SETL multiplicity:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Default value"
		SETL defaultValue:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Property modifiers"
		SETL propertyModifiers:(val)
		SET attributesValues:(attributesValues + uriVal + " :hasProperties " + "[" + " :visibility " + visibility + "; " + ":derived " + derived + "; "  + ":naming " + naming + "; " + ":type " + type + "; " + ":multiplicity " + multiplicity + "; " + ":defaultValue " + defaultValue + "; " + ":propertyModifiers " + propertyModifiers + "; " + "a" + " :ComponentProperty " + "].\n")
    }

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Operations"
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Visibility"
		SETL visibility:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Naming"
		SETL naming:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Parameter list"
		SETL parameterList:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Return type"
		SETL returnType:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Operation properties"
		SETL operationProperties:(val)
		SET attributesValues:(attributesValues + uriVal + " :hasOperations " + "[" + " :visibility " + visibility + "; " + ":naming " + naming + "; " + ":parameterList " + parameterList + "; " + ":returnType " + returnType + "; " + ":operationProperties " + operationProperties + "; " + "a" + " :ComponentOperation " + "].\n")
    }

    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL componentGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " :generalPurpose " + "\"" + componentGeneralPurpose + "\"" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }
    
    SETL result:(attributesValues)
}

PROCEDURE global GET_INTERFACE_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":Interface" + ".\n")
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Referenced interface"
    SETL referencedInterfaceAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(referencedInterfaceAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(referencedInterfaceAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objPrefix + objUri)
        SETL attributesValues:(attributesValues + uriVal + " :referencedInterface " + objPrefixUri + ".\n")
    }
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL interfaceDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " :description " + "\"" + interfaceDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL interfaceComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasComment " + "\"" + interfaceComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL interfaceOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasOpenQuestions " + "\"" + interfaceOpenQuestions + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Visibility"
    SETL interfaceVisibility:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasVisibility " + "\"" + interfaceVisibility + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Type"
    SETL interfaceType:(val)
    SETL attributesValues:(attributesValues + uriVal + " :type " + "\"" + interfaceType + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsAbstract"
    SETL interfaceIsAbstract:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isAbstract " + "\"" + interfaceIsAbstract + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsLeaf"
    SETL interfaceIsLeaf:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isLeaf " + "\"" + interfaceIsLeaf + "\"" + ".\n")
    
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Details"
    SETL interfaceDetailsAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(interfaceDetailsAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(interfaceDetailsAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        CC "Core" GET_ATTR_VAL objid:(modelIdToEnter) attrname:"Prefix"
        SETL modelPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(modelIdToEnter) attrname:"URI"
        SETL modelUriValue:(val)
        SETL modelPrefixUri:(modelPrefix + modelUriValue)
        SETL attributesValues:(attributesValues + uriVal + " :detailedIn " + modelPrefixUri + ".\n")
    }

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Properties"
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Visibility"
		SETL visibility:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Derived"
		SETL derived:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Naming"
		SETL naming:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Type"
		SETL type:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Multiplicity"
		SETL multiplicity:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Default value"
		SETL defaultValue:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Property modifiers"
		SETL propertyModifiers:(val)
        SETL attributesValues:(attributesValues + uriVal + " :hasProperties " + "[" + " :visibility " + visibility + "; " + ":derived " + derived + "; "  + ":naming " + naming + "; " + ":type " + type + "; " + ":multiplicity " + multiplicity + "; " + ":defaultValue " + defaultValue + "; " + ":propertyModifiers " + propertyModifiers + "; " + "a" + " :InterfaceProperty " + "].\n")
    }

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Operations"
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Visibility"
		SETL visibility:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Naming"
		SETL naming:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Parameter list"
		SETL parameterList:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Return type"
		SETL returnType:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Operation properties"
		SETL operationProperties:(val)
		SET attributesValues:(attributesValues + uriVal + " :hasOperations " + "[" + " :visibility " + visibility + "; " + ":naming " + naming + "; " + ":parameterList " + parameterList + "; " + ":returnType " + returnType + "; " + ":operationProperties " + operationProperties + "; " + "a" + " :InterfaceOperation " + "].\n")
    }

    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL componentGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " :generalPurpose " + "\"" + componentGeneralPurpose + "\"" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }
    
    SETL result:(attributesValues)
}

PROCEDURE global GET_ARTIFACT_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":Artifact" + ".\n")
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Referenced artifact"
    SETL referencedArtifactAttributeId:(attrid)
    CC "Core" GET_INTERREF objid:(objId) attrid:(referencedArtifactAttributeId)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(referencedArtifactAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        SETL modelIdToEnter:(tmodelid)
        SETL targetObjName:(tobjname)
        SETL targetObjClassId:(tclassid)
        CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
        IF (NOT(isopened))
        {
            CC "Modeling" OPEN modelids:(modelIdToEnter)
        }
        
        CC "Core" GET_OBJ_ID modelid:(modelIdToEnter) classid:(targetObjClassId) objname:(targetObjName)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"Prefix"
        SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(objid) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objPrefix + objUri)
        SETL attributesValues:(attributesValues + uriVal + " :referencedArtifact " + objPrefixUri + ".\n")
    }
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL artifactDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " :description " + "\"" + artifactDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL artifactComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasComment " + "\"" + artifactComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL artifactOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasOpenQuestions " + "\"" + artifactOpenQuestions + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Visibility"
    SETL artifactVisibility:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasVisibility " + "\"" + artifactVisibility + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Extended property"
    SETL artifactExtendedProperty:(val)
    SETL attributesValues:(attributesValues + uriVal + " :extendedProperty " + "\"" + artifactExtendedProperty + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"User defined property"
    SETL artifactUserDefinedProperty:(val)
    SETL attributesValues:(attributesValues + uriVal + " :userDefinedProperty " + "\"" + artifactUserDefinedProperty + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"File name"
    SETL artifactFileName:(val)
    SETL attributesValues:(attributesValues + uriVal + " :fileName " + "\"" + artifactFileName + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsAbstract"
    SETL artifactIsAbstract:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isAbstract " + "\"" + artifactIsAbstract + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsLeaf"
    SETL artifactIsLeaf:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isLeaf " + "\"" + artifactIsLeaf + "\"" + ".\n")

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Sub artifacts"
    SETL subArtifactsAttributeId:(attrid)
    CC "Core" GET_ALL_INTERREFS_OF_ATTR objid:(objId) attrid:(subArtifactsAttributeId)
    #CC "AdoScript" VIEWBOX text:(reftext)
    CC "Core" GET_INTERREF_COUNT objid:(objId) attrid:(subArtifactsAttributeId)
    SETL intrfCount:(count)
    IF(intrfCount > 0)
    {
        FOR i from:(1) to:(intrfCount)
        {
            #users should never use : in names
            SETL textEx:(token(reftext, i, "REF "))
            SETL md:(token(textEx, 7, ":"))
            SETL modelIdToEnter:(token(md, 0, " "))
            SETL tobj:(token(textEx, 9, ":"))
            SETL searchedObjId:(token(tobj, 0, " "))
            CC "Modeling" IS_OPENED modelid:(modelIdToEnter)
            IF (NOT(isopened))
            {
                CC "Modeling" OPEN modelids:(modelIdToEnter)
            }
            CC "Core" GET_ATTR_VAL objid:(VAL searchedObjId) attrname:"Prefix"
            SETL objPrefix:(val)
            CC "Core" GET_ATTR_VAL objid:(VAL searchedObjId) attrname:"URI"
            SETL objUri:(val)
            SETL objPrefixUri:(objPrefix + objUri)
            SETL attributesValues:(attributesValues + uriVal + " :hasSubArtifact " + objPrefixUri + ".\n")
        }
    }

    #includes placed above sub artifacts (inside)
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Name"
    SETL objName:(val)
    SETL aqlExpr:("{" + "\"" + objName + "\"" + ":\"Artifact (UML)" + "\"" + "}<-" + "\"" + "Is inside" + "\"")
    CC "AQL" EVAL_AQL_EXPRESSION expr:(aqlExpr) modelid:(actModelId)
    SETL insideObjids:(objids)
    FOR i in:(insideObjids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
        SETL objPrefix:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
        SETL objUri:(val)
        SETL objPrefixUri:(objPrefix + objUri)
        SETL attributesValues:(attributesValues + uriVal + " :hasSubArtifact " + objPrefixUri + ".\n")
    }
    #--- 

    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Execution"
    SETL artifactExecution:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasExecution " + "\"" + artifactExecution + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Transaction mode"
    SETL artifactTransactionMode:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasTransactionMode " + "\"" + artifactTransactionMode + "\"" + ".\n")

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Properties"
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Visibility"
		SETL visibility:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Derived"
		SETL derived:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Naming"
		SETL naming:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Type"
		SETL type:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Multiplicity"
		SETL multiplicity:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Default value"
		SETL defaultValue:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Property modifiers"
		SETL propertyModifiers:(val)
		SET attributesValues:(attributesValues + uriVal + " :hasProperties " + "[" + " :visibility " + visibility + "; " + ":derived " + derived + "; "  + ":naming " + naming + "; " + ":type " + type + "; " + ":multiplicity " + multiplicity + "; " + ":defaultValue " + defaultValue + "; " + ":propertyModifiers " + propertyModifiers + "; " + "a" + " :ArtifactProperty " + "].\n")
    }

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Operations"
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Visibility"
		SETL visibility:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Naming"
		SETL naming:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Parameter list"
		SETL parameterList:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Return type"
		SETL returnType:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Operation properties"
		SETL operationProperties:(val)
		SET attributesValues:(attributesValues + uriVal + " :hasOperations " + "[" + " :visibility " + visibility + "; " + ":naming " + naming + "; " + ":parameterList " + parameterList + "; " + ":returnType " + returnType + "; " + ":operationProperties " + operationProperties + "; " + "a" + " :ArtifactOperation " + "].\n")
    }

    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL artifactGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " :generalPurpose " + "\"" + artifactGeneralPurpose + "\"" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }
    
    SETL result:(attributesValues)
}

PROCEDURE global GET_DEPLOYMENTSPECIFICATION_ATTRIBUTES objId: integer uriVal: string result: reference
{
    CC "Core" GET_CLASS_ID objid:(objId)
    SETL attributesValues:("")
    SETL attributesValues:(attributesValues + uriVal + " a " + ":DeploymentSpecification" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Description"
    SETL deploymentSpecDescription:(val)
    SETL attributesValues:(attributesValues + uriVal + " :description " + "\"" + deploymentSpecDescription + "\"" + "^^" + "xsd:string" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Comment"
    SETL deploymentSpecComment:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasComment " + "\"" + deploymentSpecComment + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Open questions"
    SETL deploymentSpecOpenQuestions:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasOpenQuestions " + "\"" + deploymentSpecOpenQuestions + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Visibility"
    SETL deploymentSpecVisibility:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasVisibility " + "\"" + deploymentSpecVisibility + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"File name"
    SETL deploymentSpecFileName:(val)
    SETL attributesValues:(attributesValues + uriVal + " :fileName " + "\"" + deploymentSpecFileName + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsAbstract"
    SETL deploymentSpecIsAbstract:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isAbstract " + "\"" + deploymentSpecIsAbstract + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"IsLeaf"
    SETL deploymentSpecIsLeaf:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isLeaf " + "\"" + deploymentSpecIsLeaf + "\"" + ".\n")

    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Execution"
    SETL deploymentSpecExecution:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasExecution " + "\"" + deploymentSpecExecution + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Transaction mode"
    SETL deploymentSpecTransactionMode:(val)
    SETL attributesValues:(attributesValues + uriVal + " :isTransactionMode " + "\"" + deploymentSpecTransactionMode + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Deployment location"
    SETL deploymentSpecDeploymentLocation:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasDeploymentLocation " + "\"" + deploymentSpecDeploymentLocation + "\"" + ".\n")
    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"Execution location"
    SETL deploymentSpecExecutionLocation:(val)
    SETL attributesValues:(attributesValues + uriVal + " :hasExecutionLocation " + "\"" + deploymentSpecExecutionLocation + "\"" + ".\n")

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Properties"
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Visibility"
		SETL visibility:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Derived"
		SETL derived:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Naming"
		SETL naming:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Type"
		SETL type:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Multiplicity"
		SETL multiplicity:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Default value"
		SETL defaultValue:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Property modifiers"
		SETL propertyModifiers:(val)
		SET attributesValues:(attributesValues + uriVal + " :hasProperties " + "[" + " :visibility " + visibility + "; " + ":derived " + derived + "; "  + ":naming " + naming + "; " + ":type " + type + "; " + ":multiplicity " + multiplicity + "; " + ":defaultValue " + defaultValue + "; " + ":propertyModifiers " + propertyModifiers + "; " + "a" + " :DeploymentSpecificationProperty " + "].\n")
    }

    CC "Core" GET_ATTR_ID classid:(classid) attrname:"Operations"
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Visibility"
		SETL visibility:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Naming"
		SETL naming:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Parameter list"
		SETL parameterList:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Return type"
		SETL returnType:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Operation properties"
		SETL operationProperties:(val)
		SET attributesValues:(attributesValues + uriVal + " :hasOperations " + "[" + " :visibility " + visibility + "; " + ":naming " + naming + "; " + ":parameterList " + parameterList + "; " + ":returnType " + returnType + "; " + ":operationProperties " + operationProperties + "; " + "a" + " :DeploymentSpecificationOperation " + "].\n")
    }

    CC "Core" GET_ATTR_VAL objid:(objId) attrname:"General purpose attribute"
    SETL deploymentSpecGeneralPurpose:(val)
    SETL attributesValues:(attributesValues + uriVal + " :generalPurpose " + "\"" + deploymentSpecGeneralPurpose + "\"" + ".\n")
    
    #RDF Enrichment
    CC "Core" GET_CLASS_ID objid:(objId)
    CC "Core" GET_ATTR_ID classid:(classid) attrname:"RDF Enrichment"
    SETL attributeId:(attrid)
    CC "Core" GET_ALL_REC_ATTR_ROW_IDS objid:(objId) attrid:(attrid)
    FOR i in:(rowids)
    {
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Subject"
		SETL subject:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Predicate"
		SETL predicate:(val)
        CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Object"
		SETL object:(val)

        IF(subject = "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + uriVal + " " + predicate + " " + object + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object = "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + uriVal + ".\n")
        }
        IF(subject != "" AND predicate != "" AND object != "")
        {
            SETL attributesValues:(attributesValues + subject + " " + predicate + " " + object + ".\n")
        }
    }
    
    SETL result:(attributesValues)
}

#-------
CC "Modeling" GET_ACT_MODEL
SETL actModelId: (modelid)

CC "Core" GET_ATTR_VAL objid:(actModelId) attrname:"Prefix"
SETL modelPrefix:(val)

CC "Core" GET_ATTR_VAL objid:(actModelId) attrname:"URI"
SETL modelUri:(val)

SETL namespaces:("")
SETL endMessage:("")
GET_MODEL_NAMESPACES modelId:(actModelId) result:namespaces

IF(modelPrefix != "" AND modelUri != "")
{
    SETL message:(modelPrefix + modelUri + "\n" + "{" + "\n")
    SETL message:(namespaces + message)
    SETL endMessage:("}")
    #CC "AdoScript" VIEWBOX text:("Bobr Kurwa")

}
ELSE
{
    SETL message:("")
    SETL message:(message + namespaces)
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Node (UML)"
SETL nodeObjids:(objids)
FOR i in:(nodeObjids)
{
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(prefixVal + uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_NODE_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:nodeAttrs 
    SETL message:(message + nodeAttrs)
    SETL nodeAttrs:("")
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Component (UML)"
SETL componentObjids:(objids)
FOR i in:(componentObjids)
{
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(prefixVal + uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_COMPONENT_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:componentAttrs 
    SETL message:(message + componentAttrs)
    SETL componentAttrs:("")
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Interface (UML)"
SETL interfaceObjids:(objids)
FOR i in:(interfaceObjids)
{
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(prefixVal + uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_INTERFACE_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:interfaceAttrs 
    SETL message:(message + interfaceAttrs)
    SETL interfaceAttrs:("")
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Artifact (UML)"
SETL artifactObjids:(objids)
FOR i in:(artifactObjids)
{
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(prefixVal + uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_ARTIFACT_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:artifactAttrs 
    SETL message:(message + artifactAttrs)
    SETL artifactAttrs:("")
}

CC "Core" GET_ALL_OBJS_OF_CLASSNAME modelid:(actModelId) classname:"Deployment Specification (UML)"
SETL deploymentSpecObjids:(objids)
FOR i in:(deploymentSpecObjids)
{
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Prefix"
    SETL prefixVal:(val)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"URI"
    SETL uriVal:(val)
    SETL uriPrefix:(prefixVal + uriVal)
    CC "Core" GET_ATTR_VAL objid:(VAL i) attrname:"Name"
    SETL label:(val)
    SETL message:(message + uriPrefix + " rdfs:label " + "\"" + label + "\"" + ".\n")
    GET_DEPLOYMENTSPECIFICATION_ATTRIBUTES objId:(VAL i) uriVal:(uriPrefix) result:deploymentSpecAttrs 
    SETL message:(message + deploymentSpecAttrs)
    SETL deploymentSpecAttrs:("")
}

#Connectors
CC "Core" GET_ALL_CONNECTORS modelid:(actModelId)
FOR i in:(objids)
{
    CC "Core" GET_CLASS_ID objid:(VAL i)
    CC "Core" GET_CLASS_NAME classid:(classid)
    CC "Core" GET_CONNECTOR_ENDPOINTS objid:(VAL i)
    CC "Core" GET_ATTR_VAL objid:(fromobjid) attrname:"Prefix"
    SETL fromPrefix:(val)
    CC "Core" GET_ATTR_VAL objid:(fromobjid) attrname:"URI"
    SETL fromUri:(val)
    SETL fromUri:(fromPrefix + fromUri)
    CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:"Prefix"
    SETL toPrefix:(val)
    CC "Core" GET_ATTR_VAL objid:(toobjid) attrname:"URI"
    SETL toUri:(val)
    SETL toUri:(toPrefix + toUri)
    IF(classname = "Association (UML)")
    {
        SETL message:(message + fromUri + " :umlAssociationTo " + toUri + ".\n")
    }
    IF(classname = "Composition (UML)")
    {
        SETL message:(message + fromUri + " :umlComposition " + toUri + ".\n")
    }
    IF(classname = "Aggregation (UML)")
    {
        SETL message:(message + fromUri + " :umlAggregation " + toUri + ".\n")
    }
    IF(classname = "Generalization (UML)")
    {
        SETL message:(message + fromUri + " :umlGeneralization " + toUri + ".\n")
    }
    IF(classname = "Dependency (UML)")
    {
        SETL message:(message + fromUri + " :umlDependency " + toUri + ".\n")
    }
    IF(classname = "Realization (UML)")
    {
        SETL message:(message + fromUri + " :umlRealization " + toUri + ".\n")
    }
    IF(classname = "requires Interface (UML)")
    {
        SETL message:(message + fromUri + " :umlRequiresInterface " + toUri + ".\n")
    }
    #not addings notes, has Note
    #no support for conversations yet
}
IF (endMessage != "")
{
    SETL message:(message + endMessage)
    CC "AdoScript" VIEWBOX text:(message)
    SETL filePath:("D:\\Andrei\\ModellingTools\\WST_BPMN_Modeling_Tool\\Results\\deployment_trig.trig")
    CC "AdoScript" FWRITE file:(filePath) text:(message) binary:0
    #SETL filePath:("D:\\Andrei\\ModellingTools\\Threat_Modeling_Tool\\Scripts\\Results\\dfd_serialization_type.txt")
    #CC "AdoScript" FWRITE file:(filePath) text:("trig") binary:0
}
ELSE
{
    CC "AdoScript" VIEWBOX text:(message)
    SETL filePath:("D:\\Andrei\\ModellingTools\\WST_BPMN_Modeling_Tool\\Results\\deployment_turtle.ttl")
    CC "AdoScript" FWRITE file:(filePath) text:(message) binary:0
    #SETL filePath:("D:\\Andrei\\ModellingTools\\Threat_Modeling_Tool\\Scripts\\Results\\dfd_serialization_type.txt")
    #CC "AdoScript" FWRITE file:(filePath) text:("turtle") binary:0
}